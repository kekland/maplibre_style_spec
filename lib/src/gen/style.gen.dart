// GENERATED CODE - DO NOT MODIFY BY HAND
// Generated by tool/style/generate_style_code.js

import 'package:equatable/equatable.dart';
import 'package:maplibre_style_spec/src/_src.dart';

class Style with EquatableMixin {
  const Style({
    this.name,
    this.metadata,
    this.center,
    this.zoom,
    required this.bearing,
    required this.pitch,
    this.light,
    this.sky,
    this.projection,
    this.terrain,
    required this.sources,
    this.sprite,
    this.glyphs,
    this.transition,
    required this.layers,
  });

  factory Style.withDefaults({
    String? name,
    Object? metadata,
    List<num>? center,
    num? zoom,
    num? bearing,
    num? pitch,
    Light? light,
    Sky? sky,
    Projection? projection,
    Terrain? terrain,
    required Map<Object, Source> sources,
    Sprite? sprite,
    String? glyphs,
    Transition? transition,
    required List<Layer> layers,
  }) {
    return Style(
      name: name,
      metadata: metadata,
      center: center,
      zoom: zoom,
      bearing: bearing ?? 0,
      pitch: pitch ?? 0,
      light: light,
      sky: sky,
      projection: projection,
      terrain: terrain,
      sources: sources,
      sprite: sprite,
      glyphs: glyphs,
      transition: transition,
      layers: layers,
    );
  }

  factory Style.fromJson(Map<String, dynamic> json) {
    return Style.withDefaults(
      name: json['name'] != null? json['name'] as String : null,
      metadata: json['metadata'] != null? json['metadata'] as Object : null,
      center: json['center'] != null? (json['center'] as List).cast<num>() : null,
      zoom: json['zoom'] != null? json['zoom'] as num : null,
      bearing: json['bearing'] != null? json['bearing'] as num : null,
      pitch: json['pitch'] != null? json['pitch'] as num : null,
      light: json['light'] != null? Light.fromJson(json['light']) : null,
      sky: json['sky'] != null? Sky.fromJson(json['sky']) : null,
      projection: json['projection'] != null? Projection.fromJson(json['projection']) : null,
      terrain: json['terrain'] != null? Terrain.fromJson(json['terrain']) : null,
      sources: (json['sources'] as Map).map((k, v) => MapEntry(k, Source.fromJson(v))),
      sprite: json['sprite'] != null? Sprite.fromJson(json['sprite']) : null,
      glyphs: json['glyphs'] != null? json['glyphs'] as String : null,
      transition: json['transition'] != null? Transition.fromJson(json['transition']) : null,
      layers: (json['layers'] as List).map((e) => Layer.fromJson(e)).toList(),
    );
  }

  /// A human-readable name for the style.
  final String? name;

  /// Arbitrary properties useful to track with the stylesheet, but do not influence rendering. Properties should be prefixed to avoid collisions, like 'maplibre:'.
  final Object? metadata;

  /// Default map center in longitude and latitude.  The style center will be used only if the map has not been positioned by other means (e.g. map options or user interaction).
  final List<num>? center;

  /// Default zoom level.  The style zoom will be used only if the map has not been positioned by other means (e.g. map options or user interaction).
  final num? zoom;

  /// Default bearing, in degrees. The bearing is the compass direction that is "up"; for example, a bearing of 90Â° orients the map so that east is up. This value will be used only if the map has not been positioned by other means (e.g. map options or user interaction).
  final num bearing;

  /// Default pitch, in degrees. Zero is perpendicular to the surface, for a look straight down at the map, while a greater value like 60 looks ahead towards the horizon. The style pitch will be used only if the map has not been positioned by other means (e.g. map options or user interaction).
  final num pitch;

  /// The global light source.
  final Light? light;

  /// The map's sky configuration. **Note:** this definition is still experimental and is under development in maplibre-gl-js.
  final Sky? sky;

  /// The projection configuration. **Note:** this definition is still experimental and is under development in maplibre-gl-js.
  final Projection? projection;

  /// The terrain configuration.
  final Terrain? terrain;

  /// Sources state which data the map should display. Specify the type of source with the `type` property. Adding a source isn't enough to make data appear on the map because sources don't contain styling details like color or width. Layers refer to a source and give it a visual representation. This makes it possible to style the same source in different ways, like differentiating between types of roads in a highways layer.
  /// 
  /// Tiled sources (vector and raster) must specify their details according to the [TileJSON specification](https://github.com/mapbox/tilejson-spec).
  final Map<Object, Source> sources;

  /// An array of `{id: 'my-sprite', url: 'https://example.com/sprite'}` objects. Each object should represent a unique URL to load a sprite from and and a unique ID to use as a prefix when referencing images from that sprite (i.e. 'my-sprite:image'). All the URLs are internally extended to load both .json and .png files. If the `id` field is equal to 'default', the prefix is omitted (just 'image' instead of 'default:image'). All the IDs and URLs must be unique. For backwards compatibility, instead of an array, one can also provide a single string that represent a URL to load the sprite from. The images in this case won't be prefixed.
  final Sprite? sprite;

  /// A URL template for loading signed-distance-field glyph sets in PBF format. 
  /// 
  /// The URL must include:
  /// 
  ///  - `{fontstack}` - When requesting glyphs, this token is replaced with a comma separated list of fonts from a font stack specified in the text-font property of a symbol layer. 
  /// 
  ///  - `{range}` - When requesting glyphs, this token is replaced with a range of 256 Unicode code points. For example, to load glyphs for the Unicode Basic Latin and Basic Latin-1 Supplement blocks, the range would be 0-255. The actual ranges that are loaded are determined at runtime based on what text needs to be displayed.
  /// 
  /// This property is required if any layer uses the `text-field` layout property. The URL must be absolute, containing the [scheme, authority and path components](https://en.wikipedia.org/wiki/URL#Syntax).
  final String? glyphs;

  /// A global transition definition to use as a default across properties, to be used for timing transitions between one value and the next when no property-specific transition is set. Collision-based symbol fading is controlled independently of the style's `transition` property.
  final Transition? transition;

  /// A style's `layers` property lists all the layers available in that style. The type of layer is specified by the `type` property, and must be one of `background`, `fill`, `line`, `symbol`, `raster`, `circle`, `fill-extrusion`, `heatmap`, `hillshade`.
  /// 
  /// Except for layers of the `background` type, each layer needs to refer to a source. Layers take the data that they get from a source, optionally filter features, and then define how those features are styled.
  final List<Layer> layers;

  Style copyWith({
    String? name,
    Object? metadata,
    List<num>? center,
    num? zoom,
    num? bearing,
    num? pitch,
    Light? light,
    Sky? sky,
    Projection? projection,
    Terrain? terrain,
    Map<Object, Source>? sources,
    Sprite? sprite,
    String? glyphs,
    Transition? transition,
    List<Layer>? layers,
  }) {
    return Style(
      name: name ?? this.name,
      metadata: metadata ?? this.metadata,
      center: center ?? this.center,
      zoom: zoom ?? this.zoom,
      bearing: bearing ?? this.bearing,
      pitch: pitch ?? this.pitch,
      light: light ?? this.light,
      sky: sky ?? this.sky,
      projection: projection ?? this.projection,
      terrain: terrain ?? this.terrain,
      sources: sources ?? this.sources,
      sprite: sprite ?? this.sprite,
      glyphs: glyphs ?? this.glyphs,
      transition: transition ?? this.transition,
      layers: layers ?? this.layers,
    );
  }

  @override
  List<Object?> get props => [
    name,
    metadata,
    center,
    zoom,
    bearing,
    pitch,
    light,
    sky,
    projection,
    terrain,
    sources,
    sprite,
    glyphs,
    transition,
    layers,
  ];

  @override
  bool get stringify => true;
}

class SourceVector extends Source with EquatableMixin {
  const SourceVector({
    required this.type,
    this.url,
    this.tiles,
    required this.bounds,
    required this.scheme,
    required this.minzoom,
    required this.maxzoom,
    this.attribution,
    this.promoteId,
    required this.volatile,
  });

  factory SourceVector.withDefaults({
    required SourceVector$Type type,
    String? url,
    List<String>? tiles,
    List<num>? bounds,
    SourceVector$Scheme? scheme,
    num? minzoom,
    num? maxzoom,
    String? attribution,
    Map<Object, String>? promoteId,
    bool? volatile,
  }) {
    return SourceVector(
      type: type,
      url: url,
      tiles: tiles,
      bounds: bounds ?? List<num>.from([-180,-85.051129,180,85.051129]),
      scheme: scheme ?? SourceVector$Scheme.xyz,
      minzoom: minzoom ?? 0,
      maxzoom: maxzoom ?? 22,
      attribution: attribution,
      promoteId: promoteId,
      volatile: volatile ?? false,
    );
  }

  factory SourceVector.fromJson(Map<String, dynamic> json) {
    return SourceVector.withDefaults(
      type: SourceVector$Type.fromJson(json['type']),
      url: json['url'] != null? json['url'] as String : null,
      tiles: json['tiles'] != null? (json['tiles'] as List).cast<String>() : null,
      bounds: json['bounds'] != null? (json['bounds'] as List).cast<num>() : null,
      scheme: json['scheme'] != null? SourceVector$Scheme.fromJson(json['scheme']) : null,
      minzoom: json['minzoom'] != null? json['minzoom'] as num : null,
      maxzoom: json['maxzoom'] != null? json['maxzoom'] as num : null,
      attribution: json['attribution'] != null? json['attribution'] as String : null,
      promoteId: json['promoteId'] != null? (json['promoteId'] as Map).cast<Object, String>() : null,
      volatile: json['volatile'] != null? json['volatile'] as bool : null,
    );
  }

  /// The type of the source.
  final SourceVector$Type type;

  /// A URL to a TileJSON resource. Supported protocols are `http:` and `https:`.
  final String? url;

  /// An array of one or more tile source URLs, as in the TileJSON spec.
  final List<String>? tiles;

  /// An array containing the longitude and latitude of the southwest and northeast corners of the source's bounding box in the following order: `[sw.lng, sw.lat, ne.lng, ne.lat]`. When this property is included in a source, no tiles outside of the given bounds are requested by MapLibre.
  final List<num> bounds;

  /// Influences the y direction of the tile coordinates. The global-mercator (aka Spherical Mercator) profile is assumed.
  final SourceVector$Scheme scheme;

  /// Minimum zoom level for which tiles are available, as in the TileJSON spec.
  final num minzoom;

  /// Maximum zoom level for which tiles are available, as in the TileJSON spec. Data from tiles at the maxzoom are used when displaying the map at higher zoom levels.
  final num maxzoom;

  /// Contains an attribution to be displayed when the map is shown to a user.
  final String? attribution;

  /// A property to use as a feature id (for feature state). Either a property name, or an object of the form `{<sourceLayer>: <propertyName>}`. If specified as a string for a vector tile source, the same property is used across all its source layers.
  final Map<Object, String>? promoteId;

  /// A setting to determine whether a source's tiles are cached locally.
  final bool volatile;

  SourceVector copyWith({
    SourceVector$Type? type,
    String? url,
    List<String>? tiles,
    List<num>? bounds,
    SourceVector$Scheme? scheme,
    num? minzoom,
    num? maxzoom,
    String? attribution,
    Map<Object, String>? promoteId,
    bool? volatile,
  }) {
    return SourceVector(
      type: type ?? this.type,
      url: url ?? this.url,
      tiles: tiles ?? this.tiles,
      bounds: bounds ?? this.bounds,
      scheme: scheme ?? this.scheme,
      minzoom: minzoom ?? this.minzoom,
      maxzoom: maxzoom ?? this.maxzoom,
      attribution: attribution ?? this.attribution,
      promoteId: promoteId ?? this.promoteId,
      volatile: volatile ?? this.volatile,
    );
  }

  @override
  List<Object?> get props => [
    type,
    url,
    tiles,
    bounds,
    scheme,
    minzoom,
    maxzoom,
    attribution,
    promoteId,
    volatile,
  ];

  @override
  bool get stringify => true;
}

class SourceRaster extends Source with EquatableMixin {
  const SourceRaster({
    required this.type,
    this.url,
    this.tiles,
    required this.bounds,
    required this.minzoom,
    required this.maxzoom,
    required this.tileSize,
    required this.scheme,
    this.attribution,
    required this.volatile,
  });

  factory SourceRaster.withDefaults({
    required SourceRaster$Type type,
    String? url,
    List<String>? tiles,
    List<num>? bounds,
    num? minzoom,
    num? maxzoom,
    num? tileSize,
    SourceRaster$Scheme? scheme,
    String? attribution,
    bool? volatile,
  }) {
    return SourceRaster(
      type: type,
      url: url,
      tiles: tiles,
      bounds: bounds ?? List<num>.from([-180,-85.051129,180,85.051129]),
      minzoom: minzoom ?? 0,
      maxzoom: maxzoom ?? 22,
      tileSize: tileSize ?? 512,
      scheme: scheme ?? SourceRaster$Scheme.xyz,
      attribution: attribution,
      volatile: volatile ?? false,
    );
  }

  factory SourceRaster.fromJson(Map<String, dynamic> json) {
    return SourceRaster.withDefaults(
      type: SourceRaster$Type.fromJson(json['type']),
      url: json['url'] != null? json['url'] as String : null,
      tiles: json['tiles'] != null? (json['tiles'] as List).cast<String>() : null,
      bounds: json['bounds'] != null? (json['bounds'] as List).cast<num>() : null,
      minzoom: json['minzoom'] != null? json['minzoom'] as num : null,
      maxzoom: json['maxzoom'] != null? json['maxzoom'] as num : null,
      tileSize: json['tileSize'] != null? json['tileSize'] as num : null,
      scheme: json['scheme'] != null? SourceRaster$Scheme.fromJson(json['scheme']) : null,
      attribution: json['attribution'] != null? json['attribution'] as String : null,
      volatile: json['volatile'] != null? json['volatile'] as bool : null,
    );
  }

  /// The type of the source.
  final SourceRaster$Type type;

  /// A URL to a TileJSON resource. Supported protocols are `http:` and `https:`.
  final String? url;

  /// An array of one or more tile source URLs, as in the TileJSON spec.
  final List<String>? tiles;

  /// An array containing the longitude and latitude of the southwest and northeast corners of the source's bounding box in the following order: `[sw.lng, sw.lat, ne.lng, ne.lat]`. When this property is included in a source, no tiles outside of the given bounds are requested by MapLibre.
  final List<num> bounds;

  /// Minimum zoom level for which tiles are available, as in the TileJSON spec.
  final num minzoom;

  /// Maximum zoom level for which tiles are available, as in the TileJSON spec. Data from tiles at the maxzoom are used when displaying the map at higher zoom levels.
  final num maxzoom;

  /// The minimum visual size to display tiles for this layer. Only configurable for raster layers.
  final num tileSize;

  /// Influences the y direction of the tile coordinates. The global-mercator (aka Spherical Mercator) profile is assumed.
  final SourceRaster$Scheme scheme;

  /// Contains an attribution to be displayed when the map is shown to a user.
  final String? attribution;

  /// A setting to determine whether a source's tiles are cached locally.
  final bool volatile;

  SourceRaster copyWith({
    SourceRaster$Type? type,
    String? url,
    List<String>? tiles,
    List<num>? bounds,
    num? minzoom,
    num? maxzoom,
    num? tileSize,
    SourceRaster$Scheme? scheme,
    String? attribution,
    bool? volatile,
  }) {
    return SourceRaster(
      type: type ?? this.type,
      url: url ?? this.url,
      tiles: tiles ?? this.tiles,
      bounds: bounds ?? this.bounds,
      minzoom: minzoom ?? this.minzoom,
      maxzoom: maxzoom ?? this.maxzoom,
      tileSize: tileSize ?? this.tileSize,
      scheme: scheme ?? this.scheme,
      attribution: attribution ?? this.attribution,
      volatile: volatile ?? this.volatile,
    );
  }

  @override
  List<Object?> get props => [
    type,
    url,
    tiles,
    bounds,
    minzoom,
    maxzoom,
    tileSize,
    scheme,
    attribution,
    volatile,
  ];

  @override
  bool get stringify => true;
}

class SourceRasterDem extends Source with EquatableMixin {
  const SourceRasterDem({
    required this.type,
    this.url,
    this.tiles,
    required this.bounds,
    required this.minzoom,
    required this.maxzoom,
    required this.tileSize,
    this.attribution,
    required this.encoding,
    required this.redFactor,
    required this.blueFactor,
    required this.greenFactor,
    required this.baseShift,
    required this.volatile,
  });

  factory SourceRasterDem.withDefaults({
    required SourceRasterDem$Type type,
    String? url,
    List<String>? tiles,
    List<num>? bounds,
    num? minzoom,
    num? maxzoom,
    num? tileSize,
    String? attribution,
    SourceRasterDem$Encoding? encoding,
    num? redFactor,
    num? blueFactor,
    num? greenFactor,
    num? baseShift,
    bool? volatile,
  }) {
    return SourceRasterDem(
      type: type,
      url: url,
      tiles: tiles,
      bounds: bounds ?? List<num>.from([-180,-85.051129,180,85.051129]),
      minzoom: minzoom ?? 0,
      maxzoom: maxzoom ?? 22,
      tileSize: tileSize ?? 512,
      attribution: attribution,
      encoding: encoding ?? SourceRasterDem$Encoding.mapbox,
      redFactor: redFactor ?? 1,
      blueFactor: blueFactor ?? 1,
      greenFactor: greenFactor ?? 1,
      baseShift: baseShift ?? 0,
      volatile: volatile ?? false,
    );
  }

  factory SourceRasterDem.fromJson(Map<String, dynamic> json) {
    return SourceRasterDem.withDefaults(
      type: SourceRasterDem$Type.fromJson(json['type']),
      url: json['url'] != null? json['url'] as String : null,
      tiles: json['tiles'] != null? (json['tiles'] as List).cast<String>() : null,
      bounds: json['bounds'] != null? (json['bounds'] as List).cast<num>() : null,
      minzoom: json['minzoom'] != null? json['minzoom'] as num : null,
      maxzoom: json['maxzoom'] != null? json['maxzoom'] as num : null,
      tileSize: json['tileSize'] != null? json['tileSize'] as num : null,
      attribution: json['attribution'] != null? json['attribution'] as String : null,
      encoding: json['encoding'] != null? SourceRasterDem$Encoding.fromJson(json['encoding']) : null,
      redFactor: json['redFactor'] != null? json['redFactor'] as num : null,
      blueFactor: json['blueFactor'] != null? json['blueFactor'] as num : null,
      greenFactor: json['greenFactor'] != null? json['greenFactor'] as num : null,
      baseShift: json['baseShift'] != null? json['baseShift'] as num : null,
      volatile: json['volatile'] != null? json['volatile'] as bool : null,
    );
  }

  /// The type of the source.
  final SourceRasterDem$Type type;

  /// A URL to a TileJSON resource. Supported protocols are `http:` and `https:`.
  final String? url;

  /// An array of one or more tile source URLs, as in the TileJSON spec.
  final List<String>? tiles;

  /// An array containing the longitude and latitude of the southwest and northeast corners of the source's bounding box in the following order: `[sw.lng, sw.lat, ne.lng, ne.lat]`. When this property is included in a source, no tiles outside of the given bounds are requested by MapLibre.
  final List<num> bounds;

  /// Minimum zoom level for which tiles are available, as in the TileJSON spec.
  final num minzoom;

  /// Maximum zoom level for which tiles are available, as in the TileJSON spec. Data from tiles at the maxzoom are used when displaying the map at higher zoom levels.
  final num maxzoom;

  /// The minimum visual size to display tiles for this layer. Only configurable for raster layers.
  final num tileSize;

  /// Contains an attribution to be displayed when the map is shown to a user.
  final String? attribution;

  /// The encoding used by this source. Mapbox Terrain RGB is used by default.
  final SourceRasterDem$Encoding encoding;

  /// Value that will be multiplied by the red channel value when decoding. Only used on custom encodings.
  final num redFactor;

  /// Value that will be multiplied by the blue channel value when decoding. Only used on custom encodings.
  final num blueFactor;

  /// Value that will be multiplied by the green channel value when decoding. Only used on custom encodings.
  final num greenFactor;

  /// Value that will be added to the encoding mix when decoding. Only used on custom encodings.
  final num baseShift;

  /// A setting to determine whether a source's tiles are cached locally.
  final bool volatile;

  SourceRasterDem copyWith({
    SourceRasterDem$Type? type,
    String? url,
    List<String>? tiles,
    List<num>? bounds,
    num? minzoom,
    num? maxzoom,
    num? tileSize,
    String? attribution,
    SourceRasterDem$Encoding? encoding,
    num? redFactor,
    num? blueFactor,
    num? greenFactor,
    num? baseShift,
    bool? volatile,
  }) {
    return SourceRasterDem(
      type: type ?? this.type,
      url: url ?? this.url,
      tiles: tiles ?? this.tiles,
      bounds: bounds ?? this.bounds,
      minzoom: minzoom ?? this.minzoom,
      maxzoom: maxzoom ?? this.maxzoom,
      tileSize: tileSize ?? this.tileSize,
      attribution: attribution ?? this.attribution,
      encoding: encoding ?? this.encoding,
      redFactor: redFactor ?? this.redFactor,
      blueFactor: blueFactor ?? this.blueFactor,
      greenFactor: greenFactor ?? this.greenFactor,
      baseShift: baseShift ?? this.baseShift,
      volatile: volatile ?? this.volatile,
    );
  }

  @override
  List<Object?> get props => [
    type,
    url,
    tiles,
    bounds,
    minzoom,
    maxzoom,
    tileSize,
    attribution,
    encoding,
    redFactor,
    blueFactor,
    greenFactor,
    baseShift,
    volatile,
  ];

  @override
  bool get stringify => true;
}

class SourceGeoJson extends Source with EquatableMixin {
  const SourceGeoJson({
    required this.type,
    required this.data,
    required this.maxzoom,
    this.attribution,
    required this.buffer,
    this.filter,
    required this.tolerance,
    required this.cluster,
    required this.clusterRadius,
    this.clusterMaxZoom,
    this.clusterMinPoints,
    this.clusterProperties,
    required this.lineMetrics,
    required this.generateId,
    this.promoteId,
  });

  factory SourceGeoJson.withDefaults({
    required SourceGeoJson$Type type,
    required Object data,
    num? maxzoom,
    String? attribution,
    num? buffer,
    Expression<bool>? filter,
    num? tolerance,
    bool? cluster,
    num? clusterRadius,
    num? clusterMaxZoom,
    num? clusterMinPoints,
    Object? clusterProperties,
    bool? lineMetrics,
    bool? generateId,
    Map<Object, String>? promoteId,
  }) {
    return SourceGeoJson(
      type: type,
      data: data,
      maxzoom: maxzoom ?? 18,
      attribution: attribution,
      buffer: buffer ?? 128,
      filter: filter,
      tolerance: tolerance ?? 0.375,
      cluster: cluster ?? false,
      clusterRadius: clusterRadius ?? 50,
      clusterMaxZoom: clusterMaxZoom,
      clusterMinPoints: clusterMinPoints,
      clusterProperties: clusterProperties,
      lineMetrics: lineMetrics ?? false,
      generateId: generateId ?? false,
      promoteId: promoteId,
    );
  }

  factory SourceGeoJson.fromJson(Map<String, dynamic> json) {
    return SourceGeoJson.withDefaults(
      type: SourceGeoJson$Type.fromJson(json['type']),
      data: json['data'] as Object,
      maxzoom: json['maxzoom'] != null? json['maxzoom'] as num : null,
      attribution: json['attribution'] != null? json['attribution'] as String : null,
      buffer: json['buffer'] != null? json['buffer'] as num : null,
      filter: json['filter'] != null? Expression<bool>.fromJson(json['filter']) : null,
      tolerance: json['tolerance'] != null? json['tolerance'] as num : null,
      cluster: json['cluster'] != null? json['cluster'] as bool : null,
      clusterRadius: json['clusterRadius'] != null? json['clusterRadius'] as num : null,
      clusterMaxZoom: json['clusterMaxZoom'] != null? json['clusterMaxZoom'] as num : null,
      clusterMinPoints: json['clusterMinPoints'] != null? json['clusterMinPoints'] as num : null,
      clusterProperties: json['clusterProperties'] != null? json['clusterProperties'] as Object : null,
      lineMetrics: json['lineMetrics'] != null? json['lineMetrics'] as bool : null,
      generateId: json['generateId'] != null? json['generateId'] as bool : null,
      promoteId: json['promoteId'] != null? (json['promoteId'] as Map).cast<Object, String>() : null,
    );
  }

  /// The data type of the GeoJSON source.
  final SourceGeoJson$Type type;

  /// A URL to a GeoJSON file, or inline GeoJSON.
  final Object data;

  /// Maximum zoom level at which to create vector tiles (higher means greater detail at high zoom levels).
  final num maxzoom;

  /// Contains an attribution to be displayed when the map is shown to a user.
  final String? attribution;

  /// Size of the tile buffer on each side. A value of 0 produces no buffer. A value of 512 produces a buffer as wide as the tile itself. Larger values produce fewer rendering artifacts near tile edges and slower performance.
  final num buffer;

  /// An expression for filtering features prior to processing them for rendering.
  final Expression<bool>? filter;

  /// Douglas-Peucker simplification tolerance (higher means simpler geometries and faster performance).
  final num tolerance;

  /// If the data is a collection of point features, setting this to true clusters the points by radius into groups. Cluster groups become new `Point` features in the source with additional properties:
  /// 
  ///  * `cluster` Is `true` if the point is a cluster 
  /// 
  ///  * `cluster_id` A unique id for the cluster to be used in conjunction with the [cluster inspection methods](https://maplibre.org/maplibre-gl-js/docs/API/classes/GeoJSONSource/#getclusterexpansionzoom)
  /// 
  ///  * `point_count` Number of original points grouped into this cluster
  /// 
  ///  * `point_count_abbreviated` An abbreviated point count
  final bool cluster;

  /// Radius of each cluster if clustering is enabled. A value of 512 indicates a radius equal to the width of a tile.
  final num clusterRadius;

  /// Max zoom on which to cluster points if clustering is enabled. Defaults to one zoom less than maxzoom (so that last zoom features are not clustered). Clusters are re-evaluated at integer zoom levels so setting clusterMaxZoom to 14 means the clusters will be displayed until z15.
  final num? clusterMaxZoom;

  /// Minimum number of points necessary to form a cluster if clustering is enabled. Defaults to `2`.
  final num? clusterMinPoints;

  /// An object defining custom properties on the generated clusters if clustering is enabled, aggregating values from clustered points. Has the form `{"property_name": [operator, map_expression]}`. `operator` is any expression function that accepts at least 2 operands (e.g. `"+"` or `"max"`) â it accumulates the property value from clusters/points the cluster contains; `map_expression` produces the value of a single point.
  /// 
  /// Example: `{"sum": ["+", ["get", "scalerank"]]}`.
  /// 
  /// For more advanced use cases, in place of `operator`, you can use a custom reduce expression that references a special `["accumulated"]` value, e.g.:
  /// 
  /// `{"sum": [["+", ["accumulated"], ["get", "sum"]], ["get", "scalerank"]]}`
  final Object? clusterProperties;

  /// Whether to calculate line distance metrics. This is required for line layers that specify `line-gradient` values.
  final bool lineMetrics;

  /// Whether to generate ids for the geojson features. When enabled, the `feature.id` property will be auto assigned based on its index in the `features` array, over-writing any previous values.
  final bool generateId;

  /// A property to use as a feature id (for feature state). Either a property name, or an object of the form `{<sourceLayer>: <propertyName>}`.
  final Map<Object, String>? promoteId;

  SourceGeoJson copyWith({
    SourceGeoJson$Type? type,
    Object? data,
    num? maxzoom,
    String? attribution,
    num? buffer,
    Expression<bool>? filter,
    num? tolerance,
    bool? cluster,
    num? clusterRadius,
    num? clusterMaxZoom,
    num? clusterMinPoints,
    Object? clusterProperties,
    bool? lineMetrics,
    bool? generateId,
    Map<Object, String>? promoteId,
  }) {
    return SourceGeoJson(
      type: type ?? this.type,
      data: data ?? this.data,
      maxzoom: maxzoom ?? this.maxzoom,
      attribution: attribution ?? this.attribution,
      buffer: buffer ?? this.buffer,
      filter: filter ?? this.filter,
      tolerance: tolerance ?? this.tolerance,
      cluster: cluster ?? this.cluster,
      clusterRadius: clusterRadius ?? this.clusterRadius,
      clusterMaxZoom: clusterMaxZoom ?? this.clusterMaxZoom,
      clusterMinPoints: clusterMinPoints ?? this.clusterMinPoints,
      clusterProperties: clusterProperties ?? this.clusterProperties,
      lineMetrics: lineMetrics ?? this.lineMetrics,
      generateId: generateId ?? this.generateId,
      promoteId: promoteId ?? this.promoteId,
    );
  }

  @override
  List<Object?> get props => [
    type,
    data,
    maxzoom,
    attribution,
    buffer,
    filter,
    tolerance,
    cluster,
    clusterRadius,
    clusterMaxZoom,
    clusterMinPoints,
    clusterProperties,
    lineMetrics,
    generateId,
    promoteId,
  ];

  @override
  bool get stringify => true;
}

class SourceVideo extends Source with EquatableMixin {
  const SourceVideo({
    required this.type,
    required this.urls,
    required this.coordinates,
  });

  factory SourceVideo.withDefaults({
    required SourceVideo$Type type,
    required List<String> urls,
    required List<List<num>> coordinates,
  }) {
    return SourceVideo(
      type: type,
      urls: urls,
      coordinates: coordinates,
    );
  }

  factory SourceVideo.fromJson(Map<String, dynamic> json) {
    return SourceVideo.withDefaults(
      type: SourceVideo$Type.fromJson(json['type']),
      urls: (json['urls'] as List).cast<String>(),
      coordinates: (json['coordinates'] as List).map((e) => (e as List).map((e) => e as num).toList()).toList(),
    );
  }

  /// The data type of the video source.
  final SourceVideo$Type type;

  /// URLs to video content in order of preferred format.
  final List<String> urls;

  /// Corners of video specified in longitude, latitude pairs.
  final List<List<num>> coordinates;

  SourceVideo copyWith({
    SourceVideo$Type? type,
    List<String>? urls,
    List<List<num>>? coordinates,
  }) {
    return SourceVideo(
      type: type ?? this.type,
      urls: urls ?? this.urls,
      coordinates: coordinates ?? this.coordinates,
    );
  }

  @override
  List<Object?> get props => [
    type,
    urls,
    coordinates,
  ];

  @override
  bool get stringify => true;
}

class SourceImage extends Source with EquatableMixin {
  const SourceImage({
    required this.type,
    required this.url,
    required this.coordinates,
  });

  factory SourceImage.withDefaults({
    required SourceImage$Type type,
    required String url,
    required List<List<num>> coordinates,
  }) {
    return SourceImage(
      type: type,
      url: url,
      coordinates: coordinates,
    );
  }

  factory SourceImage.fromJson(Map<String, dynamic> json) {
    return SourceImage.withDefaults(
      type: SourceImage$Type.fromJson(json['type']),
      url: json['url'] as String,
      coordinates: (json['coordinates'] as List).map((e) => (e as List).map((e) => e as num).toList()).toList(),
    );
  }

  /// The data type of the image source.
  final SourceImage$Type type;

  /// URL that points to an image.
  final String url;

  /// Corners of image specified in longitude, latitude pairs.
  final List<List<num>> coordinates;

  SourceImage copyWith({
    SourceImage$Type? type,
    String? url,
    List<List<num>>? coordinates,
  }) {
    return SourceImage(
      type: type ?? this.type,
      url: url ?? this.url,
      coordinates: coordinates ?? this.coordinates,
    );
  }

  @override
  List<Object?> get props => [
    type,
    url,
    coordinates,
  ];

  @override
  bool get stringify => true;
}

class Layer with EquatableMixin {
  const Layer({
    required this.id,
    required this.type,
    this.metadata,
    this.source,
    this.sourceLayer,
    this.minzoom,
    this.maxzoom,
    this.filter,
    this.layout,
    this.paint,
  });

  factory Layer.withDefaults({
    required String id,
    required Layer$Type type,
    Object? metadata,
    String? source,
    String? sourceLayer,
    num? minzoom,
    num? maxzoom,
    Expression<bool>? filter,
    Layout? layout,
    Paint? paint,
  }) {
    return Layer(
      id: id,
      type: type,
      metadata: metadata,
      source: source,
      sourceLayer: sourceLayer,
      minzoom: minzoom,
      maxzoom: maxzoom,
      filter: filter,
      layout: layout,
      paint: paint,
    );
  }

  factory Layer.fromJson(Map<String, dynamic> json) {
    return Layer.withDefaults(
      id: json['id'] as String,
      type: Layer$Type.fromJson(json['type']),
      metadata: json['metadata'] != null? json['metadata'] as Object : null,
      source: json['source'] != null? json['source'] as String : null,
      sourceLayer: json['source-layer'] != null? json['source-layer'] as String : null,
      minzoom: json['minzoom'] != null? json['minzoom'] as num : null,
      maxzoom: json['maxzoom'] != null? json['maxzoom'] as num : null,
      filter: json['filter'] != null? Expression<bool>.fromJson(json['filter']) : null,
      layout: json['layout'] != null? Layout.fromJson(json['layout'], type: Layer$Type.fromJson(json['type'])) : null,
      paint: json['paint'] != null? Paint.fromJson(json['paint'], type: Layer$Type.fromJson(json['type'])) : null,
    );
  }

  /// Unique layer name.
  final String id;

  /// Rendering type of this layer.
  final Layer$Type type;

  /// Arbitrary properties useful to track with the layer, but do not influence rendering. Properties should be prefixed to avoid collisions, like 'maplibre:'.
  final Object? metadata;

  /// Name of a source description to be used for this layer. Required for all layer types except `background`.
  final String? source;

  /// Layer to use from a vector tile source. Required for vector tile sources; prohibited for all other source types, including GeoJSON sources.
  final String? sourceLayer;

  /// The minimum zoom level for the layer. At zoom levels less than the minzoom, the layer will be hidden.
  final num? minzoom;

  /// The maximum zoom level for the layer. At zoom levels equal to or greater than the maxzoom, the layer will be hidden.
  final num? maxzoom;

  /// A expression specifying conditions on source features. Only features that match the filter are displayed. Zoom expressions in filters are only evaluated at integer zoom levels. The `feature-state` expression is not supported in filter expressions.
  final Expression<bool>? filter;

  /// Layout properties for the layer.
  final Layout? layout;

  /// Default paint properties for this layer.
  final Paint? paint;

  Layer copyWith({
    String? id,
    Layer$Type? type,
    Object? metadata,
    String? source,
    String? sourceLayer,
    num? minzoom,
    num? maxzoom,
    Expression<bool>? filter,
    Layout? layout,
    Paint? paint,
  }) {
    return Layer(
      id: id ?? this.id,
      type: type ?? this.type,
      metadata: metadata ?? this.metadata,
      source: source ?? this.source,
      sourceLayer: sourceLayer ?? this.sourceLayer,
      minzoom: minzoom ?? this.minzoom,
      maxzoom: maxzoom ?? this.maxzoom,
      filter: filter ?? this.filter,
      layout: layout ?? this.layout,
      paint: paint ?? this.paint,
    );
  }

  @override
  List<Object?> get props => [
    id,
    type,
    metadata,
    source,
    sourceLayer,
    minzoom,
    maxzoom,
    filter,
    layout,
    paint,
  ];

  @override
  bool get stringify => true;
}

class LayoutBackground extends Layout with EquatableMixin {
  const LayoutBackground({
    required this.visibility,
  });

  factory LayoutBackground.withDefaults({
    ConstantProperty<Visibility>? visibility,
  }) {
    return LayoutBackground(
      visibility: visibility?.withDefaultValue(Visibility.visible) ?? ConstantProperty<Visibility>.value(Visibility.visible),
    );
  }

  factory LayoutBackground.fromJson(Map<String, dynamic> json) {
    return LayoutBackground.withDefaults(
      visibility: json['visibility'] != null? ConstantProperty<Visibility>.fromJson(json['visibility']) : null,
    );
  }

  /// Whether this layer is displayed.
  final ConstantProperty<Visibility> visibility;

  LayoutBackground copyWith({
    ConstantProperty<Visibility>? visibility,
  }) {
    return LayoutBackground(
      visibility: visibility ?? this.visibility,
    );
  }

  @override
  List<Object?> get props => [
    visibility,
  ];

  @override
  bool get stringify => true;
}

class LayoutFill extends Layout with EquatableMixin {
  const LayoutFill({
    this.fillSortKey,
    required this.visibility,
  });

  factory LayoutFill.withDefaults({
    DataDrivenProperty<num>? fillSortKey,
    ConstantProperty<Visibility>? visibility,
  }) {
    return LayoutFill(
      fillSortKey: fillSortKey,
      visibility: visibility?.withDefaultValue(Visibility.visible) ?? ConstantProperty<Visibility>.value(Visibility.visible),
    );
  }

  factory LayoutFill.fromJson(Map<String, dynamic> json) {
    return LayoutFill.withDefaults(
      fillSortKey: json['fill-sort-key'] != null? DataDrivenProperty<num>.fromJson(json['fill-sort-key']) : null,
      visibility: json['visibility'] != null? ConstantProperty<Visibility>.fromJson(json['visibility']) : null,
    );
  }

  /// Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.
  final DataDrivenProperty<num>? fillSortKey;

  /// Whether this layer is displayed.
  final ConstantProperty<Visibility> visibility;

  LayoutFill copyWith({
    DataDrivenProperty<num>? fillSortKey,
    ConstantProperty<Visibility>? visibility,
  }) {
    return LayoutFill(
      fillSortKey: fillSortKey ?? this.fillSortKey,
      visibility: visibility ?? this.visibility,
    );
  }

  @override
  List<Object?> get props => [
    fillSortKey,
    visibility,
  ];

  @override
  bool get stringify => true;
}

class LayoutCircle extends Layout with EquatableMixin {
  const LayoutCircle({
    this.circleSortKey,
    required this.visibility,
  });

  factory LayoutCircle.withDefaults({
    DataDrivenProperty<num>? circleSortKey,
    ConstantProperty<Visibility>? visibility,
  }) {
    return LayoutCircle(
      circleSortKey: circleSortKey,
      visibility: visibility?.withDefaultValue(Visibility.visible) ?? ConstantProperty<Visibility>.value(Visibility.visible),
    );
  }

  factory LayoutCircle.fromJson(Map<String, dynamic> json) {
    return LayoutCircle.withDefaults(
      circleSortKey: json['circle-sort-key'] != null? DataDrivenProperty<num>.fromJson(json['circle-sort-key']) : null,
      visibility: json['visibility'] != null? ConstantProperty<Visibility>.fromJson(json['visibility']) : null,
    );
  }

  /// Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.
  final DataDrivenProperty<num>? circleSortKey;

  /// Whether this layer is displayed.
  final ConstantProperty<Visibility> visibility;

  LayoutCircle copyWith({
    DataDrivenProperty<num>? circleSortKey,
    ConstantProperty<Visibility>? visibility,
  }) {
    return LayoutCircle(
      circleSortKey: circleSortKey ?? this.circleSortKey,
      visibility: visibility ?? this.visibility,
    );
  }

  @override
  List<Object?> get props => [
    circleSortKey,
    visibility,
  ];

  @override
  bool get stringify => true;
}

class LayoutHeatmap extends Layout with EquatableMixin {
  const LayoutHeatmap({
    required this.visibility,
  });

  factory LayoutHeatmap.withDefaults({
    ConstantProperty<Visibility>? visibility,
  }) {
    return LayoutHeatmap(
      visibility: visibility?.withDefaultValue(Visibility.visible) ?? ConstantProperty<Visibility>.value(Visibility.visible),
    );
  }

  factory LayoutHeatmap.fromJson(Map<String, dynamic> json) {
    return LayoutHeatmap.withDefaults(
      visibility: json['visibility'] != null? ConstantProperty<Visibility>.fromJson(json['visibility']) : null,
    );
  }

  /// Whether this layer is displayed.
  final ConstantProperty<Visibility> visibility;

  LayoutHeatmap copyWith({
    ConstantProperty<Visibility>? visibility,
  }) {
    return LayoutHeatmap(
      visibility: visibility ?? this.visibility,
    );
  }

  @override
  List<Object?> get props => [
    visibility,
  ];

  @override
  bool get stringify => true;
}

class LayoutFillExtrusion extends Layout with EquatableMixin {
  const LayoutFillExtrusion({
    required this.visibility,
  });

  factory LayoutFillExtrusion.withDefaults({
    ConstantProperty<Visibility>? visibility,
  }) {
    return LayoutFillExtrusion(
      visibility: visibility?.withDefaultValue(Visibility.visible) ?? ConstantProperty<Visibility>.value(Visibility.visible),
    );
  }

  factory LayoutFillExtrusion.fromJson(Map<String, dynamic> json) {
    return LayoutFillExtrusion.withDefaults(
      visibility: json['visibility'] != null? ConstantProperty<Visibility>.fromJson(json['visibility']) : null,
    );
  }

  /// Whether this layer is displayed.
  final ConstantProperty<Visibility> visibility;

  LayoutFillExtrusion copyWith({
    ConstantProperty<Visibility>? visibility,
  }) {
    return LayoutFillExtrusion(
      visibility: visibility ?? this.visibility,
    );
  }

  @override
  List<Object?> get props => [
    visibility,
  ];

  @override
  bool get stringify => true;
}

class LayoutLine extends Layout with EquatableMixin {
  const LayoutLine({
    required this.lineCap,
    required this.lineJoin,
    required this.lineMiterLimit,
    required this.lineRoundLimit,
    this.lineSortKey,
    required this.visibility,
  });

  factory LayoutLine.withDefaults({
    DataConstantProperty<LayoutLine$LineCap>? lineCap,
    DataDrivenProperty<LayoutLine$LineJoin>? lineJoin,
    DataConstantProperty<num>? lineMiterLimit,
    DataConstantProperty<num>? lineRoundLimit,
    DataDrivenProperty<num>? lineSortKey,
    ConstantProperty<Visibility>? visibility,
  }) {
    return LayoutLine(
      lineCap: lineCap?.withDefaultValue(LayoutLine$LineCap.butt) ?? DataConstantProperty<LayoutLine$LineCap>.value(LayoutLine$LineCap.butt),
      lineJoin: lineJoin?.withDefaultValue(LayoutLine$LineJoin.miter) ?? DataDrivenProperty<LayoutLine$LineJoin>.value(LayoutLine$LineJoin.miter),
      lineMiterLimit: lineMiterLimit?.withDefaultValue(2) ?? DataConstantProperty<num>.value(2),
      lineRoundLimit: lineRoundLimit?.withDefaultValue(1.05) ?? DataConstantProperty<num>.value(1.05),
      lineSortKey: lineSortKey,
      visibility: visibility?.withDefaultValue(Visibility.visible) ?? ConstantProperty<Visibility>.value(Visibility.visible),
    );
  }

  factory LayoutLine.fromJson(Map<String, dynamic> json) {
    return LayoutLine.withDefaults(
      lineCap: json['line-cap'] != null? DataConstantProperty<LayoutLine$LineCap>.fromJson(json['line-cap']) : null,
      lineJoin: json['line-join'] != null? DataDrivenProperty<LayoutLine$LineJoin>.fromJson(json['line-join']) : null,
      lineMiterLimit: json['line-miter-limit'] != null? DataConstantProperty<num>.fromJson(json['line-miter-limit']) : null,
      lineRoundLimit: json['line-round-limit'] != null? DataConstantProperty<num>.fromJson(json['line-round-limit']) : null,
      lineSortKey: json['line-sort-key'] != null? DataDrivenProperty<num>.fromJson(json['line-sort-key']) : null,
      visibility: json['visibility'] != null? ConstantProperty<Visibility>.fromJson(json['visibility']) : null,
    );
  }

  /// The display of line endings.
  final DataConstantProperty<LayoutLine$LineCap> lineCap;

  /// The display of lines when joining.
  final DataDrivenProperty<LayoutLine$LineJoin> lineJoin;

  /// Used to automatically convert miter joins to bevel joins for sharp angles.
  final DataConstantProperty<num> lineMiterLimit;

  /// Used to automatically convert round joins to miter joins for shallow angles.
  final DataConstantProperty<num> lineRoundLimit;

  /// Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.
  final DataDrivenProperty<num>? lineSortKey;

  /// Whether this layer is displayed.
  final ConstantProperty<Visibility> visibility;

  LayoutLine copyWith({
    DataConstantProperty<LayoutLine$LineCap>? lineCap,
    DataDrivenProperty<LayoutLine$LineJoin>? lineJoin,
    DataConstantProperty<num>? lineMiterLimit,
    DataConstantProperty<num>? lineRoundLimit,
    DataDrivenProperty<num>? lineSortKey,
    ConstantProperty<Visibility>? visibility,
  }) {
    return LayoutLine(
      lineCap: lineCap ?? this.lineCap,
      lineJoin: lineJoin ?? this.lineJoin,
      lineMiterLimit: lineMiterLimit ?? this.lineMiterLimit,
      lineRoundLimit: lineRoundLimit ?? this.lineRoundLimit,
      lineSortKey: lineSortKey ?? this.lineSortKey,
      visibility: visibility ?? this.visibility,
    );
  }

  @override
  List<Object?> get props => [
    lineCap,
    lineJoin,
    lineMiterLimit,
    lineRoundLimit,
    lineSortKey,
    visibility,
  ];

  @override
  bool get stringify => true;
}

class LayoutSymbol extends Layout with EquatableMixin {
  const LayoutSymbol({
    required this.symbolPlacement,
    required this.symbolSpacing,
    required this.symbolAvoidEdges,
    this.symbolSortKey,
    required this.symbolZOrder,
    required this.iconAllowOverlap,
    this.iconOverlap,
    required this.iconIgnorePlacement,
    required this.iconOptional,
    required this.iconRotationAlignment,
    required this.iconSize,
    required this.iconTextFit,
    required this.iconTextFitPadding,
    this.iconImage,
    required this.iconRotate,
    required this.iconPadding,
    required this.iconKeepUpright,
    required this.iconOffset,
    required this.iconAnchor,
    required this.iconPitchAlignment,
    required this.textPitchAlignment,
    required this.textRotationAlignment,
    required this.textField,
    required this.textFont,
    required this.textSize,
    required this.textMaxWidth,
    required this.textLineHeight,
    required this.textLetterSpacing,
    required this.textJustify,
    required this.textRadialOffset,
    this.textVariableAnchor,
    this.textVariableAnchorOffset,
    required this.textAnchor,
    required this.textMaxAngle,
    this.textWritingMode,
    required this.textRotate,
    required this.textPadding,
    required this.textKeepUpright,
    required this.textTransform,
    required this.textOffset,
    required this.textAllowOverlap,
    this.textOverlap,
    required this.textIgnorePlacement,
    required this.textOptional,
    required this.visibility,
  });

  factory LayoutSymbol.withDefaults({
    DataConstantProperty<LayoutSymbol$SymbolPlacement>? symbolPlacement,
    DataConstantProperty<num>? symbolSpacing,
    DataConstantProperty<bool>? symbolAvoidEdges,
    DataDrivenProperty<num>? symbolSortKey,
    DataConstantProperty<LayoutSymbol$SymbolZOrder>? symbolZOrder,
    DataConstantProperty<bool>? iconAllowOverlap,
    DataConstantProperty<LayoutSymbol$IconOverlap>? iconOverlap,
    DataConstantProperty<bool>? iconIgnorePlacement,
    DataConstantProperty<bool>? iconOptional,
    DataConstantProperty<LayoutSymbol$IconRotationAlignment>? iconRotationAlignment,
    DataDrivenProperty<num>? iconSize,
    DataConstantProperty<LayoutSymbol$IconTextFit>? iconTextFit,
    DataConstantProperty<List<num>>? iconTextFitPadding,
    DataDrivenProperty<ResolvedImage>? iconImage,
    DataDrivenProperty<num>? iconRotate,
    DataDrivenProperty<Padding>? iconPadding,
    DataConstantProperty<bool>? iconKeepUpright,
    DataDrivenProperty<List<num>>? iconOffset,
    DataDrivenProperty<LayoutSymbol$IconAnchor>? iconAnchor,
    DataConstantProperty<LayoutSymbol$IconPitchAlignment>? iconPitchAlignment,
    DataConstantProperty<LayoutSymbol$TextPitchAlignment>? textPitchAlignment,
    DataConstantProperty<LayoutSymbol$TextRotationAlignment>? textRotationAlignment,
    DataDrivenProperty<Formatted>? textField,
    DataDrivenProperty<List<String>>? textFont,
    DataDrivenProperty<num>? textSize,
    DataDrivenProperty<num>? textMaxWidth,
    DataConstantProperty<num>? textLineHeight,
    DataDrivenProperty<num>? textLetterSpacing,
    DataDrivenProperty<LayoutSymbol$TextJustify>? textJustify,
    DataDrivenProperty<num>? textRadialOffset,
    DataConstantProperty<List<LayoutSymbol$TextVariableAnchor>>? textVariableAnchor,
    DataDrivenProperty<VariableAnchorOffsetCollection>? textVariableAnchorOffset,
    DataDrivenProperty<LayoutSymbol$TextAnchor>? textAnchor,
    DataConstantProperty<num>? textMaxAngle,
    DataConstantProperty<List<LayoutSymbol$TextWritingMode>>? textWritingMode,
    DataDrivenProperty<num>? textRotate,
    DataConstantProperty<num>? textPadding,
    DataConstantProperty<bool>? textKeepUpright,
    DataDrivenProperty<LayoutSymbol$TextTransform>? textTransform,
    DataDrivenProperty<List<num>>? textOffset,
    DataConstantProperty<bool>? textAllowOverlap,
    DataConstantProperty<LayoutSymbol$TextOverlap>? textOverlap,
    DataConstantProperty<bool>? textIgnorePlacement,
    DataConstantProperty<bool>? textOptional,
    ConstantProperty<Visibility>? visibility,
  }) {
    return LayoutSymbol(
      symbolPlacement: symbolPlacement?.withDefaultValue(LayoutSymbol$SymbolPlacement.point) ?? DataConstantProperty<LayoutSymbol$SymbolPlacement>.value(LayoutSymbol$SymbolPlacement.point),
      symbolSpacing: symbolSpacing?.withDefaultValue(250) ?? DataConstantProperty<num>.value(250),
      symbolAvoidEdges: symbolAvoidEdges?.withDefaultValue(false) ?? DataConstantProperty<bool>.value(false),
      symbolSortKey: symbolSortKey,
      symbolZOrder: symbolZOrder?.withDefaultValue(LayoutSymbol$SymbolZOrder.auto) ?? DataConstantProperty<LayoutSymbol$SymbolZOrder>.value(LayoutSymbol$SymbolZOrder.auto),
      iconAllowOverlap: iconAllowOverlap?.withDefaultValue(false) ?? DataConstantProperty<bool>.value(false),
      iconOverlap: iconOverlap,
      iconIgnorePlacement: iconIgnorePlacement?.withDefaultValue(false) ?? DataConstantProperty<bool>.value(false),
      iconOptional: iconOptional?.withDefaultValue(false) ?? DataConstantProperty<bool>.value(false),
      iconRotationAlignment: iconRotationAlignment?.withDefaultValue(LayoutSymbol$IconRotationAlignment.auto) ?? DataConstantProperty<LayoutSymbol$IconRotationAlignment>.value(LayoutSymbol$IconRotationAlignment.auto),
      iconSize: iconSize?.withDefaultValue(1) ?? DataDrivenProperty<num>.value(1),
      iconTextFit: iconTextFit?.withDefaultValue(LayoutSymbol$IconTextFit.none) ?? DataConstantProperty<LayoutSymbol$IconTextFit>.value(LayoutSymbol$IconTextFit.none),
      iconTextFitPadding: iconTextFitPadding?.withDefaultValue(List<num>.from([0,0,0,0])) ?? DataConstantProperty<List<num>>.value(List<num>.from([0,0,0,0])),
      iconImage: iconImage,
      iconRotate: iconRotate?.withDefaultValue(0) ?? DataDrivenProperty<num>.value(0),
      iconPadding: iconPadding?.withDefaultValue(Padding.fromJson([2])) ?? DataDrivenProperty<Padding>.value(Padding.fromJson([2])),
      iconKeepUpright: iconKeepUpright?.withDefaultValue(false) ?? DataConstantProperty<bool>.value(false),
      iconOffset: iconOffset?.withDefaultValue(List<num>.from([0,0])) ?? DataDrivenProperty<List<num>>.value(List<num>.from([0,0])),
      iconAnchor: iconAnchor?.withDefaultValue(LayoutSymbol$IconAnchor.center) ?? DataDrivenProperty<LayoutSymbol$IconAnchor>.value(LayoutSymbol$IconAnchor.center),
      iconPitchAlignment: iconPitchAlignment?.withDefaultValue(LayoutSymbol$IconPitchAlignment.auto) ?? DataConstantProperty<LayoutSymbol$IconPitchAlignment>.value(LayoutSymbol$IconPitchAlignment.auto),
      textPitchAlignment: textPitchAlignment?.withDefaultValue(LayoutSymbol$TextPitchAlignment.auto) ?? DataConstantProperty<LayoutSymbol$TextPitchAlignment>.value(LayoutSymbol$TextPitchAlignment.auto),
      textRotationAlignment: textRotationAlignment?.withDefaultValue(LayoutSymbol$TextRotationAlignment.auto) ?? DataConstantProperty<LayoutSymbol$TextRotationAlignment>.value(LayoutSymbol$TextRotationAlignment.auto),
      textField: textField?.withDefaultValue(const Formatted.empty()) ?? DataDrivenProperty<Formatted>.value(const Formatted.empty()),
      textFont: textFont?.withDefaultValue(const ['Open Sans Regular', 'Arial Unicode MS Regular']) ?? DataDrivenProperty<List<String>>.value(const ['Open Sans Regular', 'Arial Unicode MS Regular']),
      textSize: textSize?.withDefaultValue(16) ?? DataDrivenProperty<num>.value(16),
      textMaxWidth: textMaxWidth?.withDefaultValue(10) ?? DataDrivenProperty<num>.value(10),
      textLineHeight: textLineHeight?.withDefaultValue(1.2) ?? DataConstantProperty<num>.value(1.2),
      textLetterSpacing: textLetterSpacing?.withDefaultValue(0) ?? DataDrivenProperty<num>.value(0),
      textJustify: textJustify?.withDefaultValue(LayoutSymbol$TextJustify.center) ?? DataDrivenProperty<LayoutSymbol$TextJustify>.value(LayoutSymbol$TextJustify.center),
      textRadialOffset: textRadialOffset?.withDefaultValue(0) ?? DataDrivenProperty<num>.value(0),
      textVariableAnchor: textVariableAnchor,
      textVariableAnchorOffset: textVariableAnchorOffset,
      textAnchor: textAnchor?.withDefaultValue(LayoutSymbol$TextAnchor.center) ?? DataDrivenProperty<LayoutSymbol$TextAnchor>.value(LayoutSymbol$TextAnchor.center),
      textMaxAngle: textMaxAngle?.withDefaultValue(45) ?? DataConstantProperty<num>.value(45),
      textWritingMode: textWritingMode,
      textRotate: textRotate?.withDefaultValue(0) ?? DataDrivenProperty<num>.value(0),
      textPadding: textPadding?.withDefaultValue(2) ?? DataConstantProperty<num>.value(2),
      textKeepUpright: textKeepUpright?.withDefaultValue(true) ?? DataConstantProperty<bool>.value(true),
      textTransform: textTransform?.withDefaultValue(LayoutSymbol$TextTransform.none) ?? DataDrivenProperty<LayoutSymbol$TextTransform>.value(LayoutSymbol$TextTransform.none),
      textOffset: textOffset?.withDefaultValue(List<num>.from([0,0])) ?? DataDrivenProperty<List<num>>.value(List<num>.from([0,0])),
      textAllowOverlap: textAllowOverlap?.withDefaultValue(false) ?? DataConstantProperty<bool>.value(false),
      textOverlap: textOverlap,
      textIgnorePlacement: textIgnorePlacement?.withDefaultValue(false) ?? DataConstantProperty<bool>.value(false),
      textOptional: textOptional?.withDefaultValue(false) ?? DataConstantProperty<bool>.value(false),
      visibility: visibility?.withDefaultValue(Visibility.visible) ?? ConstantProperty<Visibility>.value(Visibility.visible),
    );
  }

  factory LayoutSymbol.fromJson(Map<String, dynamic> json) {
    return LayoutSymbol.withDefaults(
      symbolPlacement: json['symbol-placement'] != null? DataConstantProperty<LayoutSymbol$SymbolPlacement>.fromJson(json['symbol-placement']) : null,
      symbolSpacing: json['symbol-spacing'] != null? DataConstantProperty<num>.fromJson(json['symbol-spacing']) : null,
      symbolAvoidEdges: json['symbol-avoid-edges'] != null? DataConstantProperty<bool>.fromJson(json['symbol-avoid-edges']) : null,
      symbolSortKey: json['symbol-sort-key'] != null? DataDrivenProperty<num>.fromJson(json['symbol-sort-key']) : null,
      symbolZOrder: json['symbol-z-order'] != null? DataConstantProperty<LayoutSymbol$SymbolZOrder>.fromJson(json['symbol-z-order']) : null,
      iconAllowOverlap: json['icon-allow-overlap'] != null? DataConstantProperty<bool>.fromJson(json['icon-allow-overlap']) : null,
      iconOverlap: json['icon-overlap'] != null? DataConstantProperty<LayoutSymbol$IconOverlap>.fromJson(json['icon-overlap']) : null,
      iconIgnorePlacement: json['icon-ignore-placement'] != null? DataConstantProperty<bool>.fromJson(json['icon-ignore-placement']) : null,
      iconOptional: json['icon-optional'] != null? DataConstantProperty<bool>.fromJson(json['icon-optional']) : null,
      iconRotationAlignment: json['icon-rotation-alignment'] != null? DataConstantProperty<LayoutSymbol$IconRotationAlignment>.fromJson(json['icon-rotation-alignment']) : null,
      iconSize: json['icon-size'] != null? DataDrivenProperty<num>.fromJson(json['icon-size']) : null,
      iconTextFit: json['icon-text-fit'] != null? DataConstantProperty<LayoutSymbol$IconTextFit>.fromJson(json['icon-text-fit']) : null,
      iconTextFitPadding: json['icon-text-fit-padding'] != null? DataConstantProperty<List<num>>.fromJson(json['icon-text-fit-padding']) : null,
      iconImage: json['icon-image'] != null? DataDrivenProperty<ResolvedImage>.fromJson(json['icon-image']) : null,
      iconRotate: json['icon-rotate'] != null? DataDrivenProperty<num>.fromJson(json['icon-rotate']) : null,
      iconPadding: json['icon-padding'] != null? DataDrivenProperty<Padding>.fromJson(json['icon-padding']) : null,
      iconKeepUpright: json['icon-keep-upright'] != null? DataConstantProperty<bool>.fromJson(json['icon-keep-upright']) : null,
      iconOffset: json['icon-offset'] != null? DataDrivenProperty<List<num>>.fromJson(json['icon-offset']) : null,
      iconAnchor: json['icon-anchor'] != null? DataDrivenProperty<LayoutSymbol$IconAnchor>.fromJson(json['icon-anchor']) : null,
      iconPitchAlignment: json['icon-pitch-alignment'] != null? DataConstantProperty<LayoutSymbol$IconPitchAlignment>.fromJson(json['icon-pitch-alignment']) : null,
      textPitchAlignment: json['text-pitch-alignment'] != null? DataConstantProperty<LayoutSymbol$TextPitchAlignment>.fromJson(json['text-pitch-alignment']) : null,
      textRotationAlignment: json['text-rotation-alignment'] != null? DataConstantProperty<LayoutSymbol$TextRotationAlignment>.fromJson(json['text-rotation-alignment']) : null,
      textField: json['text-field'] != null? DataDrivenProperty<Formatted>.fromJson(json['text-field']) : null,
      textFont: json['text-font'] != null? DataDrivenProperty<List<String>>.fromJson(json['text-font']) : null,
      textSize: json['text-size'] != null? DataDrivenProperty<num>.fromJson(json['text-size']) : null,
      textMaxWidth: json['text-max-width'] != null? DataDrivenProperty<num>.fromJson(json['text-max-width']) : null,
      textLineHeight: json['text-line-height'] != null? DataConstantProperty<num>.fromJson(json['text-line-height']) : null,
      textLetterSpacing: json['text-letter-spacing'] != null? DataDrivenProperty<num>.fromJson(json['text-letter-spacing']) : null,
      textJustify: json['text-justify'] != null? DataDrivenProperty<LayoutSymbol$TextJustify>.fromJson(json['text-justify']) : null,
      textRadialOffset: json['text-radial-offset'] != null? DataDrivenProperty<num>.fromJson(json['text-radial-offset']) : null,
      textVariableAnchor: json['text-variable-anchor'] != null? DataConstantProperty<List<LayoutSymbol$TextVariableAnchor>>.fromJson(json['text-variable-anchor']) : null,
      textVariableAnchorOffset: json['text-variable-anchor-offset'] != null? DataDrivenProperty<VariableAnchorOffsetCollection>.fromJson(json['text-variable-anchor-offset']) : null,
      textAnchor: json['text-anchor'] != null? DataDrivenProperty<LayoutSymbol$TextAnchor>.fromJson(json['text-anchor']) : null,
      textMaxAngle: json['text-max-angle'] != null? DataConstantProperty<num>.fromJson(json['text-max-angle']) : null,
      textWritingMode: json['text-writing-mode'] != null? DataConstantProperty<List<LayoutSymbol$TextWritingMode>>.fromJson(json['text-writing-mode']) : null,
      textRotate: json['text-rotate'] != null? DataDrivenProperty<num>.fromJson(json['text-rotate']) : null,
      textPadding: json['text-padding'] != null? DataConstantProperty<num>.fromJson(json['text-padding']) : null,
      textKeepUpright: json['text-keep-upright'] != null? DataConstantProperty<bool>.fromJson(json['text-keep-upright']) : null,
      textTransform: json['text-transform'] != null? DataDrivenProperty<LayoutSymbol$TextTransform>.fromJson(json['text-transform']) : null,
      textOffset: json['text-offset'] != null? DataDrivenProperty<List<num>>.fromJson(json['text-offset']) : null,
      textAllowOverlap: json['text-allow-overlap'] != null? DataConstantProperty<bool>.fromJson(json['text-allow-overlap']) : null,
      textOverlap: json['text-overlap'] != null? DataConstantProperty<LayoutSymbol$TextOverlap>.fromJson(json['text-overlap']) : null,
      textIgnorePlacement: json['text-ignore-placement'] != null? DataConstantProperty<bool>.fromJson(json['text-ignore-placement']) : null,
      textOptional: json['text-optional'] != null? DataConstantProperty<bool>.fromJson(json['text-optional']) : null,
      visibility: json['visibility'] != null? ConstantProperty<Visibility>.fromJson(json['visibility']) : null,
    );
  }

  /// Label placement relative to its geometry.
  final DataConstantProperty<LayoutSymbol$SymbolPlacement> symbolPlacement;

  /// Distance between two symbol anchors.
  final DataConstantProperty<num> symbolSpacing;

  /// If true, the symbols will not cross tile edges to avoid mutual collisions. Recommended in layers that don't have enough padding in the vector tile to prevent collisions, or if it is a point symbol layer placed after a line symbol layer. When using a client that supports global collision detection, like MapLibre GL JS version 0.42.0 or greater, enabling this property is not needed to prevent clipped labels at tile boundaries.
  final DataConstantProperty<bool> symbolAvoidEdges;

  /// Sorts features in ascending order based on this value. Features with lower sort keys are drawn and placed first.  When `icon-allow-overlap` or `text-allow-overlap` is `false`, features with a lower sort key will have priority during placement. When `icon-allow-overlap` or `text-allow-overlap` is set to `true`, features with a higher sort key will overlap over features with a lower sort key.
  final DataDrivenProperty<num>? symbolSortKey;

  /// Determines whether overlapping symbols in the same layer are rendered in the order that they appear in the data source or by their y-position relative to the viewport. To control the order and prioritization of symbols otherwise, use `symbol-sort-key`.
  final DataConstantProperty<LayoutSymbol$SymbolZOrder> symbolZOrder;

  /// If true, the icon will be visible even if it collides with other previously drawn symbols.
  final DataConstantProperty<bool> iconAllowOverlap;

  /// Allows for control over whether to show an icon when it overlaps other symbols on the map. If `icon-overlap` is not set, `icon-allow-overlap` is used instead.
  final DataConstantProperty<LayoutSymbol$IconOverlap>? iconOverlap;

  /// If true, other symbols can be visible even if they collide with the icon.
  final DataConstantProperty<bool> iconIgnorePlacement;

  /// If true, text will display without their corresponding icons when the icon collides with other symbols and the text does not.
  final DataConstantProperty<bool> iconOptional;

  /// In combination with `symbol-placement`, determines the rotation behavior of icons.
  final DataConstantProperty<LayoutSymbol$IconRotationAlignment> iconRotationAlignment;

  /// Scales the original size of the icon by the provided factor. The new pixel size of the image will be the original pixel size multiplied by `icon-size`. 1 is the original size; 3 triples the size of the image.
  final DataDrivenProperty<num> iconSize;

  /// Scales the icon to fit around the associated text.
  final DataConstantProperty<LayoutSymbol$IconTextFit> iconTextFit;

  /// Size of the additional area added to dimensions determined by `icon-text-fit`, in clockwise order: top, right, bottom, left.
  final DataConstantProperty<List<num>> iconTextFitPadding;

  /// Name of image in sprite to use for drawing an image background.
  final DataDrivenProperty<ResolvedImage>? iconImage;

  /// Rotates the icon clockwise.
  final DataDrivenProperty<num> iconRotate;

  /// Size of additional area round the icon bounding box used for detecting symbol collisions.
  final DataDrivenProperty<Padding> iconPadding;

  /// If true, the icon may be flipped to prevent it from being rendered upside-down.
  final DataConstantProperty<bool> iconKeepUpright;

  /// Offset distance of icon from its anchor. Positive values indicate right and down, while negative values indicate left and up. Each component is multiplied by the value of `icon-size` to obtain the final offset in pixels. When combined with `icon-rotate` the offset will be as if the rotated direction was up.
  final DataDrivenProperty<List<num>> iconOffset;

  /// Part of the icon placed closest to the anchor.
  final DataDrivenProperty<LayoutSymbol$IconAnchor> iconAnchor;

  /// Orientation of icon when map is pitched.
  final DataConstantProperty<LayoutSymbol$IconPitchAlignment> iconPitchAlignment;

  /// Orientation of text when map is pitched.
  final DataConstantProperty<LayoutSymbol$TextPitchAlignment> textPitchAlignment;

  /// In combination with `symbol-placement`, determines the rotation behavior of the individual glyphs forming the text.
  final DataConstantProperty<LayoutSymbol$TextRotationAlignment> textRotationAlignment;

  /// Value to use for a text label. If a plain `string` is provided, it will be treated as a `formatted` with default/inherited formatting options.
  final DataDrivenProperty<Formatted> textField;

  /// Font stack to use for displaying text.
  final DataDrivenProperty<List<String>> textFont;

  /// Font size.
  final DataDrivenProperty<num> textSize;

  /// The maximum line width for text wrapping.
  final DataDrivenProperty<num> textMaxWidth;

  /// Text leading value for multi-line text.
  final DataConstantProperty<num> textLineHeight;

  /// Text tracking amount.
  final DataDrivenProperty<num> textLetterSpacing;

  /// Text justification options.
  final DataDrivenProperty<LayoutSymbol$TextJustify> textJustify;

  /// Radial offset of text, in the direction of the symbol's anchor. Useful in combination with `text-variable-anchor`, which defaults to using the two-dimensional `text-offset` if present.
  final DataDrivenProperty<num> textRadialOffset;

  /// To increase the chance of placing high-priority labels on the map, you can provide an array of `text-anchor` locations: the renderer will attempt to place the label at each location, in order, before moving onto the next label. Use `text-justify: auto` to choose justification based on anchor position. To apply an offset, use the `text-radial-offset` or the two-dimensional `text-offset`.
  final DataConstantProperty<List<LayoutSymbol$TextVariableAnchor>>? textVariableAnchor;

  /// To increase the chance of placing high-priority labels on the map, you can provide an array of `text-anchor` locations, each paired with an offset value. The renderer will attempt to place the label at each location, in order, before moving on to the next location+offset. Use `text-justify: auto` to choose justification based on anchor position. 
  /// 
  ///  The length of the array must be even, and must alternate between enum and point entries. i.e., each anchor location must be accompanied by a point, and that point defines the offset when the corresponding anchor location is used. Positive offset values indicate right and down, while negative values indicate left and up. Anchor locations may repeat, allowing the renderer to try multiple offsets to try and place a label using the same anchor. 
  /// 
  ///  When present, this property takes precedence over `text-anchor`, `text-variable-anchor`, `text-offset`, and `text-radial-offset`. 
  /// 
  ///  ```json 
  /// 
  ///  { "text-variable-anchor-offset": ["top", [0, 4], "left", [3,0], "bottom", [1, 1]] } 
  /// 
  ///  ``` 
  /// 
  ///  When the renderer chooses the `top` anchor, `[0, 4]` will be used for `text-offset`; the text will be shifted down by 4 ems. 
  /// 
  ///  When the renderer chooses the `left` anchor, `[3, 0]` will be used for `text-offset`; the text will be shifted right by 3 ems.
  final DataDrivenProperty<VariableAnchorOffsetCollection>? textVariableAnchorOffset;

  /// Part of the text placed closest to the anchor.
  final DataDrivenProperty<LayoutSymbol$TextAnchor> textAnchor;

  /// Maximum angle change between adjacent characters.
  final DataConstantProperty<num> textMaxAngle;

  /// The property allows control over a symbol's orientation. Note that the property values act as a hint, so that a symbol whose language doesnât support the provided orientation will be laid out in its natural orientation. Example: English point symbol will be rendered horizontally even if array value contains single 'vertical' enum value. The order of elements in an array define priority order for the placement of an orientation variant.
  final DataConstantProperty<List<LayoutSymbol$TextWritingMode>>? textWritingMode;

  /// Rotates the text clockwise.
  final DataDrivenProperty<num> textRotate;

  /// Size of the additional area around the text bounding box used for detecting symbol collisions.
  final DataConstantProperty<num> textPadding;

  /// If true, the text may be flipped vertically to prevent it from being rendered upside-down.
  final DataConstantProperty<bool> textKeepUpright;

  /// Specifies how to capitalize text, similar to the CSS `text-transform` property.
  final DataDrivenProperty<LayoutSymbol$TextTransform> textTransform;

  /// Offset distance of text from its anchor. Positive values indicate right and down, while negative values indicate left and up. If used with text-variable-anchor, input values will be taken as absolute values. Offsets along the x- and y-axis will be applied automatically based on the anchor position.
  final DataDrivenProperty<List<num>> textOffset;

  /// If true, the text will be visible even if it collides with other previously drawn symbols.
  final DataConstantProperty<bool> textAllowOverlap;

  /// Allows for control over whether to show symbol text when it overlaps other symbols on the map. If `text-overlap` is not set, `text-allow-overlap` is used instead
  final DataConstantProperty<LayoutSymbol$TextOverlap>? textOverlap;

  /// If true, other symbols can be visible even if they collide with the text.
  final DataConstantProperty<bool> textIgnorePlacement;

  /// If true, icons will display without their corresponding text when the text collides with other symbols and the icon does not.
  final DataConstantProperty<bool> textOptional;

  /// Whether this layer is displayed.
  final ConstantProperty<Visibility> visibility;

  LayoutSymbol copyWith({
    DataConstantProperty<LayoutSymbol$SymbolPlacement>? symbolPlacement,
    DataConstantProperty<num>? symbolSpacing,
    DataConstantProperty<bool>? symbolAvoidEdges,
    DataDrivenProperty<num>? symbolSortKey,
    DataConstantProperty<LayoutSymbol$SymbolZOrder>? symbolZOrder,
    DataConstantProperty<bool>? iconAllowOverlap,
    DataConstantProperty<LayoutSymbol$IconOverlap>? iconOverlap,
    DataConstantProperty<bool>? iconIgnorePlacement,
    DataConstantProperty<bool>? iconOptional,
    DataConstantProperty<LayoutSymbol$IconRotationAlignment>? iconRotationAlignment,
    DataDrivenProperty<num>? iconSize,
    DataConstantProperty<LayoutSymbol$IconTextFit>? iconTextFit,
    DataConstantProperty<List<num>>? iconTextFitPadding,
    DataDrivenProperty<ResolvedImage>? iconImage,
    DataDrivenProperty<num>? iconRotate,
    DataDrivenProperty<Padding>? iconPadding,
    DataConstantProperty<bool>? iconKeepUpright,
    DataDrivenProperty<List<num>>? iconOffset,
    DataDrivenProperty<LayoutSymbol$IconAnchor>? iconAnchor,
    DataConstantProperty<LayoutSymbol$IconPitchAlignment>? iconPitchAlignment,
    DataConstantProperty<LayoutSymbol$TextPitchAlignment>? textPitchAlignment,
    DataConstantProperty<LayoutSymbol$TextRotationAlignment>? textRotationAlignment,
    DataDrivenProperty<Formatted>? textField,
    DataDrivenProperty<List<String>>? textFont,
    DataDrivenProperty<num>? textSize,
    DataDrivenProperty<num>? textMaxWidth,
    DataConstantProperty<num>? textLineHeight,
    DataDrivenProperty<num>? textLetterSpacing,
    DataDrivenProperty<LayoutSymbol$TextJustify>? textJustify,
    DataDrivenProperty<num>? textRadialOffset,
    DataConstantProperty<List<LayoutSymbol$TextVariableAnchor>>? textVariableAnchor,
    DataDrivenProperty<VariableAnchorOffsetCollection>? textVariableAnchorOffset,
    DataDrivenProperty<LayoutSymbol$TextAnchor>? textAnchor,
    DataConstantProperty<num>? textMaxAngle,
    DataConstantProperty<List<LayoutSymbol$TextWritingMode>>? textWritingMode,
    DataDrivenProperty<num>? textRotate,
    DataConstantProperty<num>? textPadding,
    DataConstantProperty<bool>? textKeepUpright,
    DataDrivenProperty<LayoutSymbol$TextTransform>? textTransform,
    DataDrivenProperty<List<num>>? textOffset,
    DataConstantProperty<bool>? textAllowOverlap,
    DataConstantProperty<LayoutSymbol$TextOverlap>? textOverlap,
    DataConstantProperty<bool>? textIgnorePlacement,
    DataConstantProperty<bool>? textOptional,
    ConstantProperty<Visibility>? visibility,
  }) {
    return LayoutSymbol(
      symbolPlacement: symbolPlacement ?? this.symbolPlacement,
      symbolSpacing: symbolSpacing ?? this.symbolSpacing,
      symbolAvoidEdges: symbolAvoidEdges ?? this.symbolAvoidEdges,
      symbolSortKey: symbolSortKey ?? this.symbolSortKey,
      symbolZOrder: symbolZOrder ?? this.symbolZOrder,
      iconAllowOverlap: iconAllowOverlap ?? this.iconAllowOverlap,
      iconOverlap: iconOverlap ?? this.iconOverlap,
      iconIgnorePlacement: iconIgnorePlacement ?? this.iconIgnorePlacement,
      iconOptional: iconOptional ?? this.iconOptional,
      iconRotationAlignment: iconRotationAlignment ?? this.iconRotationAlignment,
      iconSize: iconSize ?? this.iconSize,
      iconTextFit: iconTextFit ?? this.iconTextFit,
      iconTextFitPadding: iconTextFitPadding ?? this.iconTextFitPadding,
      iconImage: iconImage ?? this.iconImage,
      iconRotate: iconRotate ?? this.iconRotate,
      iconPadding: iconPadding ?? this.iconPadding,
      iconKeepUpright: iconKeepUpright ?? this.iconKeepUpright,
      iconOffset: iconOffset ?? this.iconOffset,
      iconAnchor: iconAnchor ?? this.iconAnchor,
      iconPitchAlignment: iconPitchAlignment ?? this.iconPitchAlignment,
      textPitchAlignment: textPitchAlignment ?? this.textPitchAlignment,
      textRotationAlignment: textRotationAlignment ?? this.textRotationAlignment,
      textField: textField ?? this.textField,
      textFont: textFont ?? this.textFont,
      textSize: textSize ?? this.textSize,
      textMaxWidth: textMaxWidth ?? this.textMaxWidth,
      textLineHeight: textLineHeight ?? this.textLineHeight,
      textLetterSpacing: textLetterSpacing ?? this.textLetterSpacing,
      textJustify: textJustify ?? this.textJustify,
      textRadialOffset: textRadialOffset ?? this.textRadialOffset,
      textVariableAnchor: textVariableAnchor ?? this.textVariableAnchor,
      textVariableAnchorOffset: textVariableAnchorOffset ?? this.textVariableAnchorOffset,
      textAnchor: textAnchor ?? this.textAnchor,
      textMaxAngle: textMaxAngle ?? this.textMaxAngle,
      textWritingMode: textWritingMode ?? this.textWritingMode,
      textRotate: textRotate ?? this.textRotate,
      textPadding: textPadding ?? this.textPadding,
      textKeepUpright: textKeepUpright ?? this.textKeepUpright,
      textTransform: textTransform ?? this.textTransform,
      textOffset: textOffset ?? this.textOffset,
      textAllowOverlap: textAllowOverlap ?? this.textAllowOverlap,
      textOverlap: textOverlap ?? this.textOverlap,
      textIgnorePlacement: textIgnorePlacement ?? this.textIgnorePlacement,
      textOptional: textOptional ?? this.textOptional,
      visibility: visibility ?? this.visibility,
    );
  }

  @override
  List<Object?> get props => [
    symbolPlacement,
    symbolSpacing,
    symbolAvoidEdges,
    symbolSortKey,
    symbolZOrder,
    iconAllowOverlap,
    iconOverlap,
    iconIgnorePlacement,
    iconOptional,
    iconRotationAlignment,
    iconSize,
    iconTextFit,
    iconTextFitPadding,
    iconImage,
    iconRotate,
    iconPadding,
    iconKeepUpright,
    iconOffset,
    iconAnchor,
    iconPitchAlignment,
    textPitchAlignment,
    textRotationAlignment,
    textField,
    textFont,
    textSize,
    textMaxWidth,
    textLineHeight,
    textLetterSpacing,
    textJustify,
    textRadialOffset,
    textVariableAnchor,
    textVariableAnchorOffset,
    textAnchor,
    textMaxAngle,
    textWritingMode,
    textRotate,
    textPadding,
    textKeepUpright,
    textTransform,
    textOffset,
    textAllowOverlap,
    textOverlap,
    textIgnorePlacement,
    textOptional,
    visibility,
  ];

  @override
  bool get stringify => true;
}

class LayoutRaster extends Layout with EquatableMixin {
  const LayoutRaster({
    required this.visibility,
  });

  factory LayoutRaster.withDefaults({
    ConstantProperty<Visibility>? visibility,
  }) {
    return LayoutRaster(
      visibility: visibility?.withDefaultValue(Visibility.visible) ?? ConstantProperty<Visibility>.value(Visibility.visible),
    );
  }

  factory LayoutRaster.fromJson(Map<String, dynamic> json) {
    return LayoutRaster.withDefaults(
      visibility: json['visibility'] != null? ConstantProperty<Visibility>.fromJson(json['visibility']) : null,
    );
  }

  /// Whether this layer is displayed.
  final ConstantProperty<Visibility> visibility;

  LayoutRaster copyWith({
    ConstantProperty<Visibility>? visibility,
  }) {
    return LayoutRaster(
      visibility: visibility ?? this.visibility,
    );
  }

  @override
  List<Object?> get props => [
    visibility,
  ];

  @override
  bool get stringify => true;
}

class LayoutHillshade extends Layout with EquatableMixin {
  const LayoutHillshade({
    required this.visibility,
  });

  factory LayoutHillshade.withDefaults({
    ConstantProperty<Visibility>? visibility,
  }) {
    return LayoutHillshade(
      visibility: visibility?.withDefaultValue(Visibility.visible) ?? ConstantProperty<Visibility>.value(Visibility.visible),
    );
  }

  factory LayoutHillshade.fromJson(Map<String, dynamic> json) {
    return LayoutHillshade.withDefaults(
      visibility: json['visibility'] != null? ConstantProperty<Visibility>.fromJson(json['visibility']) : null,
    );
  }

  /// Whether this layer is displayed.
  final ConstantProperty<Visibility> visibility;

  LayoutHillshade copyWith({
    ConstantProperty<Visibility>? visibility,
  }) {
    return LayoutHillshade(
      visibility: visibility ?? this.visibility,
    );
  }

  @override
  List<Object?> get props => [
    visibility,
  ];

  @override
  bool get stringify => true;
}

class Light with EquatableMixin {
  const Light({
    required this.anchor,
    required this.position,
    required this.color,
    required this.intensity,
  });

  factory Light.withDefaults({
    DataConstantProperty<Light$Anchor>? anchor,
    DataConstantProperty<List<num>>? position,
    DataConstantProperty<Color>? color,
    DataConstantProperty<num>? intensity,
  }) {
    return Light(
      anchor: anchor?.withDefaultValue(Light$Anchor.viewport) ?? DataConstantProperty<Light$Anchor>.value(Light$Anchor.viewport),
      position: position?.withDefaultValue(List<num>.from([1.15,210,30])) ?? DataConstantProperty<List<num>>.value(List<num>.from([1.15,210,30])),
      color: color?.withDefaultValue(Color.fromJson('#ffffff')) ?? DataConstantProperty<Color>.value(Color.fromJson('#ffffff')),
      intensity: intensity?.withDefaultValue(0.5) ?? DataConstantProperty<num>.value(0.5),
    );
  }

  factory Light.fromJson(Map<String, dynamic> json) {
    return Light.withDefaults(
      anchor: json['anchor'] != null? DataConstantProperty<Light$Anchor>.fromJson(json['anchor']) : null,
      position: json['position'] != null? DataConstantProperty<List<num>>.fromJson(json['position']) : null,
      color: json['color'] != null? DataConstantProperty<Color>.fromJson(json['color']) : null,
      intensity: json['intensity'] != null? DataConstantProperty<num>.fromJson(json['intensity']) : null,
    );
  }

  /// Whether extruded geometries are lit relative to the map or viewport.
  final DataConstantProperty<Light$Anchor> anchor;

  /// Position of the light source relative to lit (extruded) geometries, in [r radial coordinate, a azimuthal angle, p polar angle] where r indicates the distance from the center of the base of an object to its light, a indicates the position of the light relative to 0Â° (0Â° when `light.anchor` is set to `viewport` corresponds to the top of the viewport, or 0Â° when `light.anchor` is set to `map` corresponds to due north, and degrees proceed clockwise), and p indicates the height of the light (from 0Â°, directly above, to 180Â°, directly below).
  final DataConstantProperty<List<num>> position;

  /// Color tint for lighting extruded geometries.
  final DataConstantProperty<Color> color;

  /// Intensity of lighting (on a scale from 0 to 1). Higher numbers will present as more extreme contrast.
  final DataConstantProperty<num> intensity;

  Light copyWith({
    DataConstantProperty<Light$Anchor>? anchor,
    DataConstantProperty<List<num>>? position,
    DataConstantProperty<Color>? color,
    DataConstantProperty<num>? intensity,
  }) {
    return Light(
      anchor: anchor ?? this.anchor,
      position: position ?? this.position,
      color: color ?? this.color,
      intensity: intensity ?? this.intensity,
    );
  }

  @override
  List<Object?> get props => [
    anchor,
    position,
    color,
    intensity,
  ];

  @override
  bool get stringify => true;
}

class Sky with EquatableMixin {
  const Sky({
    required this.skyColor,
    required this.horizonColor,
    required this.fogColor,
    required this.fogGroundBlend,
    required this.horizonFogBlend,
    required this.skyHorizonBlend,
    required this.atmosphereBlend,
  });

  factory Sky.withDefaults({
    DataConstantProperty<Color>? skyColor,
    DataConstantProperty<Color>? horizonColor,
    DataConstantProperty<Color>? fogColor,
    DataConstantProperty<num>? fogGroundBlend,
    DataConstantProperty<num>? horizonFogBlend,
    DataConstantProperty<num>? skyHorizonBlend,
    DataConstantProperty<num>? atmosphereBlend,
  }) {
    return Sky(
      skyColor: skyColor?.withDefaultValue(Color.fromJson('#88C6FC')) ?? DataConstantProperty<Color>.value(Color.fromJson('#88C6FC')),
      horizonColor: horizonColor?.withDefaultValue(Color.fromJson('#ffffff')) ?? DataConstantProperty<Color>.value(Color.fromJson('#ffffff')),
      fogColor: fogColor?.withDefaultValue(Color.fromJson('#ffffff')) ?? DataConstantProperty<Color>.value(Color.fromJson('#ffffff')),
      fogGroundBlend: fogGroundBlend?.withDefaultValue(0.5) ?? DataConstantProperty<num>.value(0.5),
      horizonFogBlend: horizonFogBlend?.withDefaultValue(0.8) ?? DataConstantProperty<num>.value(0.8),
      skyHorizonBlend: skyHorizonBlend?.withDefaultValue(0.8) ?? DataConstantProperty<num>.value(0.8),
      atmosphereBlend: atmosphereBlend?.withDefaultValue(0.8) ?? DataConstantProperty<num>.value(0.8),
    );
  }

  factory Sky.fromJson(Map<String, dynamic> json) {
    return Sky.withDefaults(
      skyColor: json['sky-color'] != null? DataConstantProperty<Color>.fromJson(json['sky-color']) : null,
      horizonColor: json['horizon-color'] != null? DataConstantProperty<Color>.fromJson(json['horizon-color']) : null,
      fogColor: json['fog-color'] != null? DataConstantProperty<Color>.fromJson(json['fog-color']) : null,
      fogGroundBlend: json['fog-ground-blend'] != null? DataConstantProperty<num>.fromJson(json['fog-ground-blend']) : null,
      horizonFogBlend: json['horizon-fog-blend'] != null? DataConstantProperty<num>.fromJson(json['horizon-fog-blend']) : null,
      skyHorizonBlend: json['sky-horizon-blend'] != null? DataConstantProperty<num>.fromJson(json['sky-horizon-blend']) : null,
      atmosphereBlend: json['atmosphere-blend'] != null? DataConstantProperty<num>.fromJson(json['atmosphere-blend']) : null,
    );
  }

  /// The base color for the sky.
  final DataConstantProperty<Color> skyColor;

  /// The base color at the horizon.
  final DataConstantProperty<Color> horizonColor;

  /// The base color for the fog. Requires 3D terrain.
  final DataConstantProperty<Color> fogColor;

  /// How to blend the fog over the 3D terrain. Where 0 is the map center and 1 is the horizon.
  final DataConstantProperty<num> fogGroundBlend;

  /// How to blend the fog color and the horizon color. Where 0 is using the horizon color only and 1 is using the fog color only.
  final DataConstantProperty<num> horizonFogBlend;

  /// How to blend the the sky color and the horizon color. Where 1 is blending the color at the middle of the sky and 0 is not blending at all and using the sky color only.
  final DataConstantProperty<num> skyHorizonBlend;

  /// How to blend the atmosphere. Where 1 is visible atmosphere and 0 is hidden. It is best to interpolate this expression when using globe projection.
  final DataConstantProperty<num> atmosphereBlend;

  Sky copyWith({
    DataConstantProperty<Color>? skyColor,
    DataConstantProperty<Color>? horizonColor,
    DataConstantProperty<Color>? fogColor,
    DataConstantProperty<num>? fogGroundBlend,
    DataConstantProperty<num>? horizonFogBlend,
    DataConstantProperty<num>? skyHorizonBlend,
    DataConstantProperty<num>? atmosphereBlend,
  }) {
    return Sky(
      skyColor: skyColor ?? this.skyColor,
      horizonColor: horizonColor ?? this.horizonColor,
      fogColor: fogColor ?? this.fogColor,
      fogGroundBlend: fogGroundBlend ?? this.fogGroundBlend,
      horizonFogBlend: horizonFogBlend ?? this.horizonFogBlend,
      skyHorizonBlend: skyHorizonBlend ?? this.skyHorizonBlend,
      atmosphereBlend: atmosphereBlend ?? this.atmosphereBlend,
    );
  }

  @override
  List<Object?> get props => [
    skyColor,
    horizonColor,
    fogColor,
    fogGroundBlend,
    horizonFogBlend,
    skyHorizonBlend,
    atmosphereBlend,
  ];

  @override
  bool get stringify => true;
}

class Terrain with EquatableMixin {
  const Terrain({
    required this.source,
    required this.exaggeration,
  });

  factory Terrain.withDefaults({
    required String source,
    num? exaggeration,
  }) {
    return Terrain(
      source: source,
      exaggeration: exaggeration ?? 1,
    );
  }

  factory Terrain.fromJson(Map<String, dynamic> json) {
    return Terrain.withDefaults(
      source: json['source'] as String,
      exaggeration: json['exaggeration'] != null? json['exaggeration'] as num : null,
    );
  }

  /// The source for the terrain data.
  final String source;

  /// The exaggeration of the terrain - how high it will look.
  final num exaggeration;

  Terrain copyWith({
    String? source,
    num? exaggeration,
  }) {
    return Terrain(
      source: source ?? this.source,
      exaggeration: exaggeration ?? this.exaggeration,
    );
  }

  @override
  List<Object?> get props => [
    source,
    exaggeration,
  ];

  @override
  bool get stringify => true;
}

class Projection with EquatableMixin {
  const Projection({
    required this.type,
  });

  factory Projection.withDefaults({
    Projection$Type? type,
  }) {
    return Projection(
      type: type ?? Projection$Type.mercator,
    );
  }

  factory Projection.fromJson(Map<String, dynamic> json) {
    return Projection.withDefaults(
      type: json['type'] != null? Projection$Type.fromJson(json['type']) : null,
    );
  }

  /// The projection type.
  final Projection$Type type;

  Projection copyWith({
    Projection$Type? type,
  }) {
    return Projection(
      type: type ?? this.type,
    );
  }

  @override
  List<Object?> get props => [
    type,
  ];

  @override
  bool get stringify => true;
}

class PaintFill extends Paint with EquatableMixin {
  const PaintFill({
    required this.fillAntialias,
    required this.fillOpacity,
    required this.fillColor,
    this.fillOutlineColor,
    required this.fillTranslate,
    required this.fillTranslateAnchor,
    this.fillPattern,
  });

  factory PaintFill.withDefaults({
    DataConstantProperty<bool>? fillAntialias,
    DataDrivenProperty<num>? fillOpacity,
    DataDrivenProperty<Color>? fillColor,
    DataDrivenProperty<Color>? fillOutlineColor,
    DataConstantProperty<List<num>>? fillTranslate,
    DataConstantProperty<PaintFill$FillTranslateAnchor>? fillTranslateAnchor,
    CrossFadedDataDrivenProperty<ResolvedImage>? fillPattern,
  }) {
    return PaintFill(
      fillAntialias: fillAntialias?.withDefaultValue(true) ?? DataConstantProperty<bool>.value(true),
      fillOpacity: fillOpacity?.withDefaultValue(1) ?? DataDrivenProperty<num>.value(1),
      fillColor: fillColor?.withDefaultValue(Color.fromJson('#000000')) ?? DataDrivenProperty<Color>.value(Color.fromJson('#000000')),
      fillOutlineColor: fillOutlineColor,
      fillTranslate: fillTranslate?.withDefaultValue(List<num>.from([0,0])) ?? DataConstantProperty<List<num>>.value(List<num>.from([0,0])),
      fillTranslateAnchor: fillTranslateAnchor?.withDefaultValue(PaintFill$FillTranslateAnchor.map) ?? DataConstantProperty<PaintFill$FillTranslateAnchor>.value(PaintFill$FillTranslateAnchor.map),
      fillPattern: fillPattern,
    );
  }

  factory PaintFill.fromJson(Map<String, dynamic> json) {
    return PaintFill.withDefaults(
      fillAntialias: json['fill-antialias'] != null? DataConstantProperty<bool>.fromJson(json['fill-antialias']) : null,
      fillOpacity: json['fill-opacity'] != null? DataDrivenProperty<num>.fromJson(json['fill-opacity']) : null,
      fillColor: json['fill-color'] != null? DataDrivenProperty<Color>.fromJson(json['fill-color']) : null,
      fillOutlineColor: json['fill-outline-color'] != null? DataDrivenProperty<Color>.fromJson(json['fill-outline-color']) : null,
      fillTranslate: json['fill-translate'] != null? DataConstantProperty<List<num>>.fromJson(json['fill-translate']) : null,
      fillTranslateAnchor: json['fill-translate-anchor'] != null? DataConstantProperty<PaintFill$FillTranslateAnchor>.fromJson(json['fill-translate-anchor']) : null,
      fillPattern: json['fill-pattern'] != null? CrossFadedDataDrivenProperty<ResolvedImage>.fromJson(json['fill-pattern']) : null,
    );
  }

  /// Whether or not the fill should be antialiased.
  final DataConstantProperty<bool> fillAntialias;

  /// The opacity of the entire fill layer. In contrast to the `fill-color`, this value will also affect the 1px stroke around the fill, if the stroke is used.
  final DataDrivenProperty<num> fillOpacity;

  /// The color of the filled part of this layer. This color can be specified as `rgba` with an alpha component and the color's opacity will not affect the opacity of the 1px stroke, if it is used.
  final DataDrivenProperty<Color> fillColor;

  /// The outline color of the fill. Matches the value of `fill-color` if unspecified.
  final DataDrivenProperty<Color>? fillOutlineColor;

  /// The geometry's offset. Values are [x, y] where negatives indicate left and up, respectively.
  final DataConstantProperty<List<num>> fillTranslate;

  /// Controls the frame of reference for `fill-translate`.
  final DataConstantProperty<PaintFill$FillTranslateAnchor> fillTranslateAnchor;

  /// Name of image in sprite to use for drawing image fills. For seamless patterns, image width and height must be a factor of two (2, 4, 8, ..., 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.
  final CrossFadedDataDrivenProperty<ResolvedImage>? fillPattern;

  PaintFill copyWith({
    DataConstantProperty<bool>? fillAntialias,
    DataDrivenProperty<num>? fillOpacity,
    DataDrivenProperty<Color>? fillColor,
    DataDrivenProperty<Color>? fillOutlineColor,
    DataConstantProperty<List<num>>? fillTranslate,
    DataConstantProperty<PaintFill$FillTranslateAnchor>? fillTranslateAnchor,
    CrossFadedDataDrivenProperty<ResolvedImage>? fillPattern,
  }) {
    return PaintFill(
      fillAntialias: fillAntialias ?? this.fillAntialias,
      fillOpacity: fillOpacity ?? this.fillOpacity,
      fillColor: fillColor ?? this.fillColor,
      fillOutlineColor: fillOutlineColor ?? this.fillOutlineColor,
      fillTranslate: fillTranslate ?? this.fillTranslate,
      fillTranslateAnchor: fillTranslateAnchor ?? this.fillTranslateAnchor,
      fillPattern: fillPattern ?? this.fillPattern,
    );
  }

  @override
  List<Object?> get props => [
    fillAntialias,
    fillOpacity,
    fillColor,
    fillOutlineColor,
    fillTranslate,
    fillTranslateAnchor,
    fillPattern,
  ];

  @override
  bool get stringify => true;
}

class PaintFillExtrusion extends Paint with EquatableMixin {
  const PaintFillExtrusion({
    required this.fillExtrusionOpacity,
    required this.fillExtrusionColor,
    required this.fillExtrusionTranslate,
    required this.fillExtrusionTranslateAnchor,
    this.fillExtrusionPattern,
    required this.fillExtrusionHeight,
    required this.fillExtrusionBase,
    required this.fillExtrusionVerticalGradient,
  });

  factory PaintFillExtrusion.withDefaults({
    DataConstantProperty<num>? fillExtrusionOpacity,
    DataDrivenProperty<Color>? fillExtrusionColor,
    DataConstantProperty<List<num>>? fillExtrusionTranslate,
    DataConstantProperty<PaintFillExtrusion$FillExtrusionTranslateAnchor>? fillExtrusionTranslateAnchor,
    CrossFadedDataDrivenProperty<ResolvedImage>? fillExtrusionPattern,
    DataDrivenProperty<num>? fillExtrusionHeight,
    DataDrivenProperty<num>? fillExtrusionBase,
    DataConstantProperty<bool>? fillExtrusionVerticalGradient,
  }) {
    return PaintFillExtrusion(
      fillExtrusionOpacity: fillExtrusionOpacity?.withDefaultValue(1) ?? DataConstantProperty<num>.value(1),
      fillExtrusionColor: fillExtrusionColor?.withDefaultValue(Color.fromJson('#000000')) ?? DataDrivenProperty<Color>.value(Color.fromJson('#000000')),
      fillExtrusionTranslate: fillExtrusionTranslate?.withDefaultValue(List<num>.from([0,0])) ?? DataConstantProperty<List<num>>.value(List<num>.from([0,0])),
      fillExtrusionTranslateAnchor: fillExtrusionTranslateAnchor?.withDefaultValue(PaintFillExtrusion$FillExtrusionTranslateAnchor.map) ?? DataConstantProperty<PaintFillExtrusion$FillExtrusionTranslateAnchor>.value(PaintFillExtrusion$FillExtrusionTranslateAnchor.map),
      fillExtrusionPattern: fillExtrusionPattern,
      fillExtrusionHeight: fillExtrusionHeight?.withDefaultValue(0) ?? DataDrivenProperty<num>.value(0),
      fillExtrusionBase: fillExtrusionBase?.withDefaultValue(0) ?? DataDrivenProperty<num>.value(0),
      fillExtrusionVerticalGradient: fillExtrusionVerticalGradient?.withDefaultValue(true) ?? DataConstantProperty<bool>.value(true),
    );
  }

  factory PaintFillExtrusion.fromJson(Map<String, dynamic> json) {
    return PaintFillExtrusion.withDefaults(
      fillExtrusionOpacity: json['fill-extrusion-opacity'] != null? DataConstantProperty<num>.fromJson(json['fill-extrusion-opacity']) : null,
      fillExtrusionColor: json['fill-extrusion-color'] != null? DataDrivenProperty<Color>.fromJson(json['fill-extrusion-color']) : null,
      fillExtrusionTranslate: json['fill-extrusion-translate'] != null? DataConstantProperty<List<num>>.fromJson(json['fill-extrusion-translate']) : null,
      fillExtrusionTranslateAnchor: json['fill-extrusion-translate-anchor'] != null? DataConstantProperty<PaintFillExtrusion$FillExtrusionTranslateAnchor>.fromJson(json['fill-extrusion-translate-anchor']) : null,
      fillExtrusionPattern: json['fill-extrusion-pattern'] != null? CrossFadedDataDrivenProperty<ResolvedImage>.fromJson(json['fill-extrusion-pattern']) : null,
      fillExtrusionHeight: json['fill-extrusion-height'] != null? DataDrivenProperty<num>.fromJson(json['fill-extrusion-height']) : null,
      fillExtrusionBase: json['fill-extrusion-base'] != null? DataDrivenProperty<num>.fromJson(json['fill-extrusion-base']) : null,
      fillExtrusionVerticalGradient: json['fill-extrusion-vertical-gradient'] != null? DataConstantProperty<bool>.fromJson(json['fill-extrusion-vertical-gradient']) : null,
    );
  }

  /// The opacity of the entire fill extrusion layer. This is rendered on a per-layer, not per-feature, basis, and data-driven styling is not available.
  final DataConstantProperty<num> fillExtrusionOpacity;

  /// The base color of the extruded fill. The extrusion's surfaces will be shaded differently based on this color in combination with the root `light` settings. If this color is specified as `rgba` with an alpha component, the alpha component will be ignored; use `fill-extrusion-opacity` to set layer opacity.
  final DataDrivenProperty<Color> fillExtrusionColor;

  /// The geometry's offset. Values are [x, y] where negatives indicate left and up (on the flat plane), respectively.
  final DataConstantProperty<List<num>> fillExtrusionTranslate;

  /// Controls the frame of reference for `fill-extrusion-translate`.
  final DataConstantProperty<PaintFillExtrusion$FillExtrusionTranslateAnchor> fillExtrusionTranslateAnchor;

  /// Name of image in sprite to use for drawing images on extruded fills. For seamless patterns, image width and height must be a factor of two (2, 4, 8, ..., 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.
  final CrossFadedDataDrivenProperty<ResolvedImage>? fillExtrusionPattern;

  /// The height with which to extrude this layer.
  final DataDrivenProperty<num> fillExtrusionHeight;

  /// The height with which to extrude the base of this layer. Must be less than or equal to `fill-extrusion-height`.
  final DataDrivenProperty<num> fillExtrusionBase;

  /// Whether to apply a vertical gradient to the sides of a fill-extrusion layer. If true, sides will be shaded slightly darker farther down.
  final DataConstantProperty<bool> fillExtrusionVerticalGradient;

  PaintFillExtrusion copyWith({
    DataConstantProperty<num>? fillExtrusionOpacity,
    DataDrivenProperty<Color>? fillExtrusionColor,
    DataConstantProperty<List<num>>? fillExtrusionTranslate,
    DataConstantProperty<PaintFillExtrusion$FillExtrusionTranslateAnchor>? fillExtrusionTranslateAnchor,
    CrossFadedDataDrivenProperty<ResolvedImage>? fillExtrusionPattern,
    DataDrivenProperty<num>? fillExtrusionHeight,
    DataDrivenProperty<num>? fillExtrusionBase,
    DataConstantProperty<bool>? fillExtrusionVerticalGradient,
  }) {
    return PaintFillExtrusion(
      fillExtrusionOpacity: fillExtrusionOpacity ?? this.fillExtrusionOpacity,
      fillExtrusionColor: fillExtrusionColor ?? this.fillExtrusionColor,
      fillExtrusionTranslate: fillExtrusionTranslate ?? this.fillExtrusionTranslate,
      fillExtrusionTranslateAnchor: fillExtrusionTranslateAnchor ?? this.fillExtrusionTranslateAnchor,
      fillExtrusionPattern: fillExtrusionPattern ?? this.fillExtrusionPattern,
      fillExtrusionHeight: fillExtrusionHeight ?? this.fillExtrusionHeight,
      fillExtrusionBase: fillExtrusionBase ?? this.fillExtrusionBase,
      fillExtrusionVerticalGradient: fillExtrusionVerticalGradient ?? this.fillExtrusionVerticalGradient,
    );
  }

  @override
  List<Object?> get props => [
    fillExtrusionOpacity,
    fillExtrusionColor,
    fillExtrusionTranslate,
    fillExtrusionTranslateAnchor,
    fillExtrusionPattern,
    fillExtrusionHeight,
    fillExtrusionBase,
    fillExtrusionVerticalGradient,
  ];

  @override
  bool get stringify => true;
}

class PaintLine extends Paint with EquatableMixin {
  const PaintLine({
    required this.lineOpacity,
    required this.lineColor,
    required this.lineTranslate,
    required this.lineTranslateAnchor,
    required this.lineWidth,
    required this.lineGapWidth,
    required this.lineOffset,
    required this.lineBlur,
    this.lineDasharray,
    this.linePattern,
    this.lineGradient,
  });

  factory PaintLine.withDefaults({
    DataDrivenProperty<num>? lineOpacity,
    DataDrivenProperty<Color>? lineColor,
    DataConstantProperty<List<num>>? lineTranslate,
    DataConstantProperty<PaintLine$LineTranslateAnchor>? lineTranslateAnchor,
    DataDrivenProperty<num>? lineWidth,
    DataDrivenProperty<num>? lineGapWidth,
    DataDrivenProperty<num>? lineOffset,
    DataDrivenProperty<num>? lineBlur,
    CrossFadedProperty<List<num>>? lineDasharray,
    CrossFadedDataDrivenProperty<ResolvedImage>? linePattern,
    ColorRampProperty? lineGradient,
  }) {
    return PaintLine(
      lineOpacity: lineOpacity?.withDefaultValue(1) ?? DataDrivenProperty<num>.value(1),
      lineColor: lineColor?.withDefaultValue(Color.fromJson('#000000')) ?? DataDrivenProperty<Color>.value(Color.fromJson('#000000')),
      lineTranslate: lineTranslate?.withDefaultValue(List<num>.from([0,0])) ?? DataConstantProperty<List<num>>.value(List<num>.from([0,0])),
      lineTranslateAnchor: lineTranslateAnchor?.withDefaultValue(PaintLine$LineTranslateAnchor.map) ?? DataConstantProperty<PaintLine$LineTranslateAnchor>.value(PaintLine$LineTranslateAnchor.map),
      lineWidth: lineWidth?.withDefaultValue(1) ?? DataDrivenProperty<num>.value(1),
      lineGapWidth: lineGapWidth?.withDefaultValue(0) ?? DataDrivenProperty<num>.value(0),
      lineOffset: lineOffset?.withDefaultValue(0) ?? DataDrivenProperty<num>.value(0),
      lineBlur: lineBlur?.withDefaultValue(0) ?? DataDrivenProperty<num>.value(0),
      lineDasharray: lineDasharray,
      linePattern: linePattern,
      lineGradient: lineGradient,
    );
  }

  factory PaintLine.fromJson(Map<String, dynamic> json) {
    return PaintLine.withDefaults(
      lineOpacity: json['line-opacity'] != null? DataDrivenProperty<num>.fromJson(json['line-opacity']) : null,
      lineColor: json['line-color'] != null? DataDrivenProperty<Color>.fromJson(json['line-color']) : null,
      lineTranslate: json['line-translate'] != null? DataConstantProperty<List<num>>.fromJson(json['line-translate']) : null,
      lineTranslateAnchor: json['line-translate-anchor'] != null? DataConstantProperty<PaintLine$LineTranslateAnchor>.fromJson(json['line-translate-anchor']) : null,
      lineWidth: json['line-width'] != null? DataDrivenProperty<num>.fromJson(json['line-width']) : null,
      lineGapWidth: json['line-gap-width'] != null? DataDrivenProperty<num>.fromJson(json['line-gap-width']) : null,
      lineOffset: json['line-offset'] != null? DataDrivenProperty<num>.fromJson(json['line-offset']) : null,
      lineBlur: json['line-blur'] != null? DataDrivenProperty<num>.fromJson(json['line-blur']) : null,
      lineDasharray: json['line-dasharray'] != null? CrossFadedProperty<List<num>>.fromJson(json['line-dasharray']) : null,
      linePattern: json['line-pattern'] != null? CrossFadedDataDrivenProperty<ResolvedImage>.fromJson(json['line-pattern']) : null,
      lineGradient: json['line-gradient'] != null? ColorRampProperty.fromJson(json['line-gradient']) : null,
    );
  }

  /// The opacity at which the line will be drawn.
  final DataDrivenProperty<num> lineOpacity;

  /// The color with which the line will be drawn.
  final DataDrivenProperty<Color> lineColor;

  /// The geometry's offset. Values are [x, y] where negatives indicate left and up, respectively.
  final DataConstantProperty<List<num>> lineTranslate;

  /// Controls the frame of reference for `line-translate`.
  final DataConstantProperty<PaintLine$LineTranslateAnchor> lineTranslateAnchor;

  /// Stroke thickness.
  final DataDrivenProperty<num> lineWidth;

  /// Draws a line casing outside of a line's actual path. Value indicates the width of the inner gap.
  final DataDrivenProperty<num> lineGapWidth;

  /// The line's offset. For linear features, a positive value offsets the line to the right, relative to the direction of the line, and a negative value to the left. For polygon features, a positive value results in an inset, and a negative value results in an outset.
  final DataDrivenProperty<num> lineOffset;

  /// Blur applied to the line, in pixels.
  final DataDrivenProperty<num> lineBlur;

  /// Specifies the lengths of the alternating dashes and gaps that form the dash pattern. The lengths are later scaled by the line width. To convert a dash length to pixels, multiply the length by the current line width. Note that GeoJSON sources with `lineMetrics: true` specified won't render dashed lines to the expected scale. Also note that zoom-dependent expressions will be evaluated only at integer zoom levels.
  final CrossFadedProperty<List<num>>? lineDasharray;

  /// Name of image in sprite to use for drawing image lines. For seamless patterns, image width must be a factor of two (2, 4, 8, ..., 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.
  final CrossFadedDataDrivenProperty<ResolvedImage>? linePattern;

  /// Defines a gradient with which to color a line feature. Can only be used with GeoJSON sources that specify `"lineMetrics": true`.
  final ColorRampProperty? lineGradient;

  PaintLine copyWith({
    DataDrivenProperty<num>? lineOpacity,
    DataDrivenProperty<Color>? lineColor,
    DataConstantProperty<List<num>>? lineTranslate,
    DataConstantProperty<PaintLine$LineTranslateAnchor>? lineTranslateAnchor,
    DataDrivenProperty<num>? lineWidth,
    DataDrivenProperty<num>? lineGapWidth,
    DataDrivenProperty<num>? lineOffset,
    DataDrivenProperty<num>? lineBlur,
    CrossFadedProperty<List<num>>? lineDasharray,
    CrossFadedDataDrivenProperty<ResolvedImage>? linePattern,
    ColorRampProperty? lineGradient,
  }) {
    return PaintLine(
      lineOpacity: lineOpacity ?? this.lineOpacity,
      lineColor: lineColor ?? this.lineColor,
      lineTranslate: lineTranslate ?? this.lineTranslate,
      lineTranslateAnchor: lineTranslateAnchor ?? this.lineTranslateAnchor,
      lineWidth: lineWidth ?? this.lineWidth,
      lineGapWidth: lineGapWidth ?? this.lineGapWidth,
      lineOffset: lineOffset ?? this.lineOffset,
      lineBlur: lineBlur ?? this.lineBlur,
      lineDasharray: lineDasharray ?? this.lineDasharray,
      linePattern: linePattern ?? this.linePattern,
      lineGradient: lineGradient ?? this.lineGradient,
    );
  }

  @override
  List<Object?> get props => [
    lineOpacity,
    lineColor,
    lineTranslate,
    lineTranslateAnchor,
    lineWidth,
    lineGapWidth,
    lineOffset,
    lineBlur,
    lineDasharray,
    linePattern,
    lineGradient,
  ];

  @override
  bool get stringify => true;
}

class PaintCircle extends Paint with EquatableMixin {
  const PaintCircle({
    required this.circleRadius,
    required this.circleColor,
    required this.circleBlur,
    required this.circleOpacity,
    required this.circleTranslate,
    required this.circleTranslateAnchor,
    required this.circlePitchScale,
    required this.circlePitchAlignment,
    required this.circleStrokeWidth,
    required this.circleStrokeColor,
    required this.circleStrokeOpacity,
  });

  factory PaintCircle.withDefaults({
    DataDrivenProperty<num>? circleRadius,
    DataDrivenProperty<Color>? circleColor,
    DataDrivenProperty<num>? circleBlur,
    DataDrivenProperty<num>? circleOpacity,
    DataConstantProperty<List<num>>? circleTranslate,
    DataConstantProperty<PaintCircle$CircleTranslateAnchor>? circleTranslateAnchor,
    DataConstantProperty<PaintCircle$CirclePitchScale>? circlePitchScale,
    DataConstantProperty<PaintCircle$CirclePitchAlignment>? circlePitchAlignment,
    DataDrivenProperty<num>? circleStrokeWidth,
    DataDrivenProperty<Color>? circleStrokeColor,
    DataDrivenProperty<num>? circleStrokeOpacity,
  }) {
    return PaintCircle(
      circleRadius: circleRadius?.withDefaultValue(5) ?? DataDrivenProperty<num>.value(5),
      circleColor: circleColor?.withDefaultValue(Color.fromJson('#000000')) ?? DataDrivenProperty<Color>.value(Color.fromJson('#000000')),
      circleBlur: circleBlur?.withDefaultValue(0) ?? DataDrivenProperty<num>.value(0),
      circleOpacity: circleOpacity?.withDefaultValue(1) ?? DataDrivenProperty<num>.value(1),
      circleTranslate: circleTranslate?.withDefaultValue(List<num>.from([0,0])) ?? DataConstantProperty<List<num>>.value(List<num>.from([0,0])),
      circleTranslateAnchor: circleTranslateAnchor?.withDefaultValue(PaintCircle$CircleTranslateAnchor.map) ?? DataConstantProperty<PaintCircle$CircleTranslateAnchor>.value(PaintCircle$CircleTranslateAnchor.map),
      circlePitchScale: circlePitchScale?.withDefaultValue(PaintCircle$CirclePitchScale.map) ?? DataConstantProperty<PaintCircle$CirclePitchScale>.value(PaintCircle$CirclePitchScale.map),
      circlePitchAlignment: circlePitchAlignment?.withDefaultValue(PaintCircle$CirclePitchAlignment.viewport) ?? DataConstantProperty<PaintCircle$CirclePitchAlignment>.value(PaintCircle$CirclePitchAlignment.viewport),
      circleStrokeWidth: circleStrokeWidth?.withDefaultValue(0) ?? DataDrivenProperty<num>.value(0),
      circleStrokeColor: circleStrokeColor?.withDefaultValue(Color.fromJson('#000000')) ?? DataDrivenProperty<Color>.value(Color.fromJson('#000000')),
      circleStrokeOpacity: circleStrokeOpacity?.withDefaultValue(1) ?? DataDrivenProperty<num>.value(1),
    );
  }

  factory PaintCircle.fromJson(Map<String, dynamic> json) {
    return PaintCircle.withDefaults(
      circleRadius: json['circle-radius'] != null? DataDrivenProperty<num>.fromJson(json['circle-radius']) : null,
      circleColor: json['circle-color'] != null? DataDrivenProperty<Color>.fromJson(json['circle-color']) : null,
      circleBlur: json['circle-blur'] != null? DataDrivenProperty<num>.fromJson(json['circle-blur']) : null,
      circleOpacity: json['circle-opacity'] != null? DataDrivenProperty<num>.fromJson(json['circle-opacity']) : null,
      circleTranslate: json['circle-translate'] != null? DataConstantProperty<List<num>>.fromJson(json['circle-translate']) : null,
      circleTranslateAnchor: json['circle-translate-anchor'] != null? DataConstantProperty<PaintCircle$CircleTranslateAnchor>.fromJson(json['circle-translate-anchor']) : null,
      circlePitchScale: json['circle-pitch-scale'] != null? DataConstantProperty<PaintCircle$CirclePitchScale>.fromJson(json['circle-pitch-scale']) : null,
      circlePitchAlignment: json['circle-pitch-alignment'] != null? DataConstantProperty<PaintCircle$CirclePitchAlignment>.fromJson(json['circle-pitch-alignment']) : null,
      circleStrokeWidth: json['circle-stroke-width'] != null? DataDrivenProperty<num>.fromJson(json['circle-stroke-width']) : null,
      circleStrokeColor: json['circle-stroke-color'] != null? DataDrivenProperty<Color>.fromJson(json['circle-stroke-color']) : null,
      circleStrokeOpacity: json['circle-stroke-opacity'] != null? DataDrivenProperty<num>.fromJson(json['circle-stroke-opacity']) : null,
    );
  }

  /// Circle radius.
  final DataDrivenProperty<num> circleRadius;

  /// The fill color of the circle.
  final DataDrivenProperty<Color> circleColor;

  /// Amount to blur the circle. 1 blurs the circle such that only the centerpoint is full opacity.
  final DataDrivenProperty<num> circleBlur;

  /// The opacity at which the circle will be drawn.
  final DataDrivenProperty<num> circleOpacity;

  /// The geometry's offset. Values are [x, y] where negatives indicate left and up, respectively.
  final DataConstantProperty<List<num>> circleTranslate;

  /// Controls the frame of reference for `circle-translate`.
  final DataConstantProperty<PaintCircle$CircleTranslateAnchor> circleTranslateAnchor;

  /// Controls the scaling behavior of the circle when the map is pitched.
  final DataConstantProperty<PaintCircle$CirclePitchScale> circlePitchScale;

  /// Orientation of circle when map is pitched.
  final DataConstantProperty<PaintCircle$CirclePitchAlignment> circlePitchAlignment;

  /// The width of the circle's stroke. Strokes are placed outside of the `circle-radius`.
  final DataDrivenProperty<num> circleStrokeWidth;

  /// The stroke color of the circle.
  final DataDrivenProperty<Color> circleStrokeColor;

  /// The opacity of the circle's stroke.
  final DataDrivenProperty<num> circleStrokeOpacity;

  PaintCircle copyWith({
    DataDrivenProperty<num>? circleRadius,
    DataDrivenProperty<Color>? circleColor,
    DataDrivenProperty<num>? circleBlur,
    DataDrivenProperty<num>? circleOpacity,
    DataConstantProperty<List<num>>? circleTranslate,
    DataConstantProperty<PaintCircle$CircleTranslateAnchor>? circleTranslateAnchor,
    DataConstantProperty<PaintCircle$CirclePitchScale>? circlePitchScale,
    DataConstantProperty<PaintCircle$CirclePitchAlignment>? circlePitchAlignment,
    DataDrivenProperty<num>? circleStrokeWidth,
    DataDrivenProperty<Color>? circleStrokeColor,
    DataDrivenProperty<num>? circleStrokeOpacity,
  }) {
    return PaintCircle(
      circleRadius: circleRadius ?? this.circleRadius,
      circleColor: circleColor ?? this.circleColor,
      circleBlur: circleBlur ?? this.circleBlur,
      circleOpacity: circleOpacity ?? this.circleOpacity,
      circleTranslate: circleTranslate ?? this.circleTranslate,
      circleTranslateAnchor: circleTranslateAnchor ?? this.circleTranslateAnchor,
      circlePitchScale: circlePitchScale ?? this.circlePitchScale,
      circlePitchAlignment: circlePitchAlignment ?? this.circlePitchAlignment,
      circleStrokeWidth: circleStrokeWidth ?? this.circleStrokeWidth,
      circleStrokeColor: circleStrokeColor ?? this.circleStrokeColor,
      circleStrokeOpacity: circleStrokeOpacity ?? this.circleStrokeOpacity,
    );
  }

  @override
  List<Object?> get props => [
    circleRadius,
    circleColor,
    circleBlur,
    circleOpacity,
    circleTranslate,
    circleTranslateAnchor,
    circlePitchScale,
    circlePitchAlignment,
    circleStrokeWidth,
    circleStrokeColor,
    circleStrokeOpacity,
  ];

  @override
  bool get stringify => true;
}

class PaintHeatmap extends Paint with EquatableMixin {
  const PaintHeatmap({
    required this.heatmapRadius,
    required this.heatmapWeight,
    required this.heatmapIntensity,
    required this.heatmapColor,
    required this.heatmapOpacity,
  });

  factory PaintHeatmap.withDefaults({
    DataDrivenProperty<num>? heatmapRadius,
    DataDrivenProperty<num>? heatmapWeight,
    DataConstantProperty<num>? heatmapIntensity,
    ColorRampProperty? heatmapColor,
    DataConstantProperty<num>? heatmapOpacity,
  }) {
    return PaintHeatmap(
      heatmapRadius: heatmapRadius?.withDefaultValue(30) ?? DataDrivenProperty<num>.value(30),
      heatmapWeight: heatmapWeight?.withDefaultValue(1) ?? DataDrivenProperty<num>.value(1),
      heatmapIntensity: heatmapIntensity?.withDefaultValue(1) ?? DataConstantProperty<num>.value(1),
      heatmapColor: heatmapColor?.withDefaultValue(Color.fromJson('interpolate,linear,heatmap-density,0,rgba(0, 0, 255, 0),0.1,royalblue,0.3,cyan,0.5,lime,0.7,yellow,1,red')) ?? ColorRampProperty.value(Color.fromJson('interpolate,linear,heatmap-density,0,rgba(0, 0, 255, 0),0.1,royalblue,0.3,cyan,0.5,lime,0.7,yellow,1,red')),
      heatmapOpacity: heatmapOpacity?.withDefaultValue(1) ?? DataConstantProperty<num>.value(1),
    );
  }

  factory PaintHeatmap.fromJson(Map<String, dynamic> json) {
    return PaintHeatmap.withDefaults(
      heatmapRadius: json['heatmap-radius'] != null? DataDrivenProperty<num>.fromJson(json['heatmap-radius']) : null,
      heatmapWeight: json['heatmap-weight'] != null? DataDrivenProperty<num>.fromJson(json['heatmap-weight']) : null,
      heatmapIntensity: json['heatmap-intensity'] != null? DataConstantProperty<num>.fromJson(json['heatmap-intensity']) : null,
      heatmapColor: json['heatmap-color'] != null? ColorRampProperty.fromJson(json['heatmap-color']) : null,
      heatmapOpacity: json['heatmap-opacity'] != null? DataConstantProperty<num>.fromJson(json['heatmap-opacity']) : null,
    );
  }

  /// Radius of influence of one heatmap point in pixels. Increasing the value makes the heatmap smoother, but less detailed.
  final DataDrivenProperty<num> heatmapRadius;

  /// A measure of how much an individual point contributes to the heatmap. A value of 10 would be equivalent to having 10 points of weight 1 in the same spot. Especially useful when combined with clustering.
  final DataDrivenProperty<num> heatmapWeight;

  /// Similar to `heatmap-weight` but controls the intensity of the heatmap globally. Primarily used for adjusting the heatmap based on zoom level.
  final DataConstantProperty<num> heatmapIntensity;

  /// Defines the color of each pixel based on its density value in a heatmap.  Should be an expression that uses `["heatmap-density"]` as input.
  final ColorRampProperty heatmapColor;

  /// The global opacity at which the heatmap layer will be drawn.
  final DataConstantProperty<num> heatmapOpacity;

  PaintHeatmap copyWith({
    DataDrivenProperty<num>? heatmapRadius,
    DataDrivenProperty<num>? heatmapWeight,
    DataConstantProperty<num>? heatmapIntensity,
    ColorRampProperty? heatmapColor,
    DataConstantProperty<num>? heatmapOpacity,
  }) {
    return PaintHeatmap(
      heatmapRadius: heatmapRadius ?? this.heatmapRadius,
      heatmapWeight: heatmapWeight ?? this.heatmapWeight,
      heatmapIntensity: heatmapIntensity ?? this.heatmapIntensity,
      heatmapColor: heatmapColor ?? this.heatmapColor,
      heatmapOpacity: heatmapOpacity ?? this.heatmapOpacity,
    );
  }

  @override
  List<Object?> get props => [
    heatmapRadius,
    heatmapWeight,
    heatmapIntensity,
    heatmapColor,
    heatmapOpacity,
  ];

  @override
  bool get stringify => true;
}

class PaintSymbol extends Paint with EquatableMixin {
  const PaintSymbol({
    required this.iconOpacity,
    required this.iconColor,
    required this.iconHaloColor,
    required this.iconHaloWidth,
    required this.iconHaloBlur,
    required this.iconTranslate,
    required this.iconTranslateAnchor,
    required this.textOpacity,
    required this.textColor,
    required this.textHaloColor,
    required this.textHaloWidth,
    required this.textHaloBlur,
    required this.textTranslate,
    required this.textTranslateAnchor,
  });

  factory PaintSymbol.withDefaults({
    DataDrivenProperty<num>? iconOpacity,
    DataDrivenProperty<Color>? iconColor,
    DataDrivenProperty<Color>? iconHaloColor,
    DataDrivenProperty<num>? iconHaloWidth,
    DataDrivenProperty<num>? iconHaloBlur,
    DataConstantProperty<List<num>>? iconTranslate,
    DataConstantProperty<PaintSymbol$IconTranslateAnchor>? iconTranslateAnchor,
    DataDrivenProperty<num>? textOpacity,
    DataDrivenProperty<Color>? textColor,
    DataDrivenProperty<Color>? textHaloColor,
    DataDrivenProperty<num>? textHaloWidth,
    DataDrivenProperty<num>? textHaloBlur,
    DataConstantProperty<List<num>>? textTranslate,
    DataConstantProperty<PaintSymbol$TextTranslateAnchor>? textTranslateAnchor,
  }) {
    return PaintSymbol(
      iconOpacity: iconOpacity?.withDefaultValue(1) ?? DataDrivenProperty<num>.value(1),
      iconColor: iconColor?.withDefaultValue(Color.fromJson('#000000')) ?? DataDrivenProperty<Color>.value(Color.fromJson('#000000')),
      iconHaloColor: iconHaloColor?.withDefaultValue(Color.fromJson('rgba(0, 0, 0, 0)')) ?? DataDrivenProperty<Color>.value(Color.fromJson('rgba(0, 0, 0, 0)')),
      iconHaloWidth: iconHaloWidth?.withDefaultValue(0) ?? DataDrivenProperty<num>.value(0),
      iconHaloBlur: iconHaloBlur?.withDefaultValue(0) ?? DataDrivenProperty<num>.value(0),
      iconTranslate: iconTranslate?.withDefaultValue(List<num>.from([0,0])) ?? DataConstantProperty<List<num>>.value(List<num>.from([0,0])),
      iconTranslateAnchor: iconTranslateAnchor?.withDefaultValue(PaintSymbol$IconTranslateAnchor.map) ?? DataConstantProperty<PaintSymbol$IconTranslateAnchor>.value(PaintSymbol$IconTranslateAnchor.map),
      textOpacity: textOpacity?.withDefaultValue(1) ?? DataDrivenProperty<num>.value(1),
      textColor: textColor?.withDefaultValue(Color.fromJson('#000000')) ?? DataDrivenProperty<Color>.value(Color.fromJson('#000000')),
      textHaloColor: textHaloColor?.withDefaultValue(Color.fromJson('rgba(0, 0, 0, 0)')) ?? DataDrivenProperty<Color>.value(Color.fromJson('rgba(0, 0, 0, 0)')),
      textHaloWidth: textHaloWidth?.withDefaultValue(0) ?? DataDrivenProperty<num>.value(0),
      textHaloBlur: textHaloBlur?.withDefaultValue(0) ?? DataDrivenProperty<num>.value(0),
      textTranslate: textTranslate?.withDefaultValue(List<num>.from([0,0])) ?? DataConstantProperty<List<num>>.value(List<num>.from([0,0])),
      textTranslateAnchor: textTranslateAnchor?.withDefaultValue(PaintSymbol$TextTranslateAnchor.map) ?? DataConstantProperty<PaintSymbol$TextTranslateAnchor>.value(PaintSymbol$TextTranslateAnchor.map),
    );
  }

  factory PaintSymbol.fromJson(Map<String, dynamic> json) {
    return PaintSymbol.withDefaults(
      iconOpacity: json['icon-opacity'] != null? DataDrivenProperty<num>.fromJson(json['icon-opacity']) : null,
      iconColor: json['icon-color'] != null? DataDrivenProperty<Color>.fromJson(json['icon-color']) : null,
      iconHaloColor: json['icon-halo-color'] != null? DataDrivenProperty<Color>.fromJson(json['icon-halo-color']) : null,
      iconHaloWidth: json['icon-halo-width'] != null? DataDrivenProperty<num>.fromJson(json['icon-halo-width']) : null,
      iconHaloBlur: json['icon-halo-blur'] != null? DataDrivenProperty<num>.fromJson(json['icon-halo-blur']) : null,
      iconTranslate: json['icon-translate'] != null? DataConstantProperty<List<num>>.fromJson(json['icon-translate']) : null,
      iconTranslateAnchor: json['icon-translate-anchor'] != null? DataConstantProperty<PaintSymbol$IconTranslateAnchor>.fromJson(json['icon-translate-anchor']) : null,
      textOpacity: json['text-opacity'] != null? DataDrivenProperty<num>.fromJson(json['text-opacity']) : null,
      textColor: json['text-color'] != null? DataDrivenProperty<Color>.fromJson(json['text-color']) : null,
      textHaloColor: json['text-halo-color'] != null? DataDrivenProperty<Color>.fromJson(json['text-halo-color']) : null,
      textHaloWidth: json['text-halo-width'] != null? DataDrivenProperty<num>.fromJson(json['text-halo-width']) : null,
      textHaloBlur: json['text-halo-blur'] != null? DataDrivenProperty<num>.fromJson(json['text-halo-blur']) : null,
      textTranslate: json['text-translate'] != null? DataConstantProperty<List<num>>.fromJson(json['text-translate']) : null,
      textTranslateAnchor: json['text-translate-anchor'] != null? DataConstantProperty<PaintSymbol$TextTranslateAnchor>.fromJson(json['text-translate-anchor']) : null,
    );
  }

  /// The opacity at which the icon will be drawn.
  final DataDrivenProperty<num> iconOpacity;

  /// The color of the icon. This can only be used with SDF icons.
  final DataDrivenProperty<Color> iconColor;

  /// The color of the icon's halo. Icon halos can only be used with SDF icons.
  final DataDrivenProperty<Color> iconHaloColor;

  /// Distance of halo to the icon outline. 
  /// 
  /// The unit is in pixels only for SDF sprites that were created with a blur radius of 8, multiplied by the display density. I.e., the radius needs to be 16 for `@2x` sprites, etc.
  final DataDrivenProperty<num> iconHaloWidth;

  /// Fade out the halo towards the outside.
  final DataDrivenProperty<num> iconHaloBlur;

  /// Distance that the icon's anchor is moved from its original placement. Positive values indicate right and down, while negative values indicate left and up.
  final DataConstantProperty<List<num>> iconTranslate;

  /// Controls the frame of reference for `icon-translate`.
  final DataConstantProperty<PaintSymbol$IconTranslateAnchor> iconTranslateAnchor;

  /// The opacity at which the text will be drawn.
  final DataDrivenProperty<num> textOpacity;

  /// The color with which the text will be drawn.
  final DataDrivenProperty<Color> textColor;

  /// The color of the text's halo, which helps it stand out from backgrounds.
  final DataDrivenProperty<Color> textHaloColor;

  /// Distance of halo to the font outline. Max text halo width is 1/4 of the font-size.
  final DataDrivenProperty<num> textHaloWidth;

  /// The halo's fadeout distance towards the outside.
  final DataDrivenProperty<num> textHaloBlur;

  /// Distance that the text's anchor is moved from its original placement. Positive values indicate right and down, while negative values indicate left and up.
  final DataConstantProperty<List<num>> textTranslate;

  /// Controls the frame of reference for `text-translate`.
  final DataConstantProperty<PaintSymbol$TextTranslateAnchor> textTranslateAnchor;

  PaintSymbol copyWith({
    DataDrivenProperty<num>? iconOpacity,
    DataDrivenProperty<Color>? iconColor,
    DataDrivenProperty<Color>? iconHaloColor,
    DataDrivenProperty<num>? iconHaloWidth,
    DataDrivenProperty<num>? iconHaloBlur,
    DataConstantProperty<List<num>>? iconTranslate,
    DataConstantProperty<PaintSymbol$IconTranslateAnchor>? iconTranslateAnchor,
    DataDrivenProperty<num>? textOpacity,
    DataDrivenProperty<Color>? textColor,
    DataDrivenProperty<Color>? textHaloColor,
    DataDrivenProperty<num>? textHaloWidth,
    DataDrivenProperty<num>? textHaloBlur,
    DataConstantProperty<List<num>>? textTranslate,
    DataConstantProperty<PaintSymbol$TextTranslateAnchor>? textTranslateAnchor,
  }) {
    return PaintSymbol(
      iconOpacity: iconOpacity ?? this.iconOpacity,
      iconColor: iconColor ?? this.iconColor,
      iconHaloColor: iconHaloColor ?? this.iconHaloColor,
      iconHaloWidth: iconHaloWidth ?? this.iconHaloWidth,
      iconHaloBlur: iconHaloBlur ?? this.iconHaloBlur,
      iconTranslate: iconTranslate ?? this.iconTranslate,
      iconTranslateAnchor: iconTranslateAnchor ?? this.iconTranslateAnchor,
      textOpacity: textOpacity ?? this.textOpacity,
      textColor: textColor ?? this.textColor,
      textHaloColor: textHaloColor ?? this.textHaloColor,
      textHaloWidth: textHaloWidth ?? this.textHaloWidth,
      textHaloBlur: textHaloBlur ?? this.textHaloBlur,
      textTranslate: textTranslate ?? this.textTranslate,
      textTranslateAnchor: textTranslateAnchor ?? this.textTranslateAnchor,
    );
  }

  @override
  List<Object?> get props => [
    iconOpacity,
    iconColor,
    iconHaloColor,
    iconHaloWidth,
    iconHaloBlur,
    iconTranslate,
    iconTranslateAnchor,
    textOpacity,
    textColor,
    textHaloColor,
    textHaloWidth,
    textHaloBlur,
    textTranslate,
    textTranslateAnchor,
  ];

  @override
  bool get stringify => true;
}

class PaintRaster extends Paint with EquatableMixin {
  const PaintRaster({
    required this.rasterOpacity,
    required this.rasterHueRotate,
    required this.rasterBrightnessMin,
    required this.rasterBrightnessMax,
    required this.rasterSaturation,
    required this.rasterContrast,
    required this.rasterResampling,
    required this.rasterFadeDuration,
  });

  factory PaintRaster.withDefaults({
    DataConstantProperty<num>? rasterOpacity,
    DataConstantProperty<num>? rasterHueRotate,
    DataConstantProperty<num>? rasterBrightnessMin,
    DataConstantProperty<num>? rasterBrightnessMax,
    DataConstantProperty<num>? rasterSaturation,
    DataConstantProperty<num>? rasterContrast,
    DataConstantProperty<PaintRaster$RasterResampling>? rasterResampling,
    DataConstantProperty<num>? rasterFadeDuration,
  }) {
    return PaintRaster(
      rasterOpacity: rasterOpacity?.withDefaultValue(1) ?? DataConstantProperty<num>.value(1),
      rasterHueRotate: rasterHueRotate?.withDefaultValue(0) ?? DataConstantProperty<num>.value(0),
      rasterBrightnessMin: rasterBrightnessMin?.withDefaultValue(0) ?? DataConstantProperty<num>.value(0),
      rasterBrightnessMax: rasterBrightnessMax?.withDefaultValue(1) ?? DataConstantProperty<num>.value(1),
      rasterSaturation: rasterSaturation?.withDefaultValue(0) ?? DataConstantProperty<num>.value(0),
      rasterContrast: rasterContrast?.withDefaultValue(0) ?? DataConstantProperty<num>.value(0),
      rasterResampling: rasterResampling?.withDefaultValue(PaintRaster$RasterResampling.linear) ?? DataConstantProperty<PaintRaster$RasterResampling>.value(PaintRaster$RasterResampling.linear),
      rasterFadeDuration: rasterFadeDuration?.withDefaultValue(300) ?? DataConstantProperty<num>.value(300),
    );
  }

  factory PaintRaster.fromJson(Map<String, dynamic> json) {
    return PaintRaster.withDefaults(
      rasterOpacity: json['raster-opacity'] != null? DataConstantProperty<num>.fromJson(json['raster-opacity']) : null,
      rasterHueRotate: json['raster-hue-rotate'] != null? DataConstantProperty<num>.fromJson(json['raster-hue-rotate']) : null,
      rasterBrightnessMin: json['raster-brightness-min'] != null? DataConstantProperty<num>.fromJson(json['raster-brightness-min']) : null,
      rasterBrightnessMax: json['raster-brightness-max'] != null? DataConstantProperty<num>.fromJson(json['raster-brightness-max']) : null,
      rasterSaturation: json['raster-saturation'] != null? DataConstantProperty<num>.fromJson(json['raster-saturation']) : null,
      rasterContrast: json['raster-contrast'] != null? DataConstantProperty<num>.fromJson(json['raster-contrast']) : null,
      rasterResampling: json['raster-resampling'] != null? DataConstantProperty<PaintRaster$RasterResampling>.fromJson(json['raster-resampling']) : null,
      rasterFadeDuration: json['raster-fade-duration'] != null? DataConstantProperty<num>.fromJson(json['raster-fade-duration']) : null,
    );
  }

  /// The opacity at which the image will be drawn.
  final DataConstantProperty<num> rasterOpacity;

  /// Rotates hues around the color wheel.
  final DataConstantProperty<num> rasterHueRotate;

  /// Increase or reduce the brightness of the image. The value is the minimum brightness.
  final DataConstantProperty<num> rasterBrightnessMin;

  /// Increase or reduce the brightness of the image. The value is the maximum brightness.
  final DataConstantProperty<num> rasterBrightnessMax;

  /// Increase or reduce the saturation of the image.
  final DataConstantProperty<num> rasterSaturation;

  /// Increase or reduce the contrast of the image.
  final DataConstantProperty<num> rasterContrast;

  /// The resampling/interpolation method to use for overscaling, also known as texture magnification filter
  final DataConstantProperty<PaintRaster$RasterResampling> rasterResampling;

  /// Fade duration when a new tile is added, or when a video is started or its coordinates are updated.
  final DataConstantProperty<num> rasterFadeDuration;

  PaintRaster copyWith({
    DataConstantProperty<num>? rasterOpacity,
    DataConstantProperty<num>? rasterHueRotate,
    DataConstantProperty<num>? rasterBrightnessMin,
    DataConstantProperty<num>? rasterBrightnessMax,
    DataConstantProperty<num>? rasterSaturation,
    DataConstantProperty<num>? rasterContrast,
    DataConstantProperty<PaintRaster$RasterResampling>? rasterResampling,
    DataConstantProperty<num>? rasterFadeDuration,
  }) {
    return PaintRaster(
      rasterOpacity: rasterOpacity ?? this.rasterOpacity,
      rasterHueRotate: rasterHueRotate ?? this.rasterHueRotate,
      rasterBrightnessMin: rasterBrightnessMin ?? this.rasterBrightnessMin,
      rasterBrightnessMax: rasterBrightnessMax ?? this.rasterBrightnessMax,
      rasterSaturation: rasterSaturation ?? this.rasterSaturation,
      rasterContrast: rasterContrast ?? this.rasterContrast,
      rasterResampling: rasterResampling ?? this.rasterResampling,
      rasterFadeDuration: rasterFadeDuration ?? this.rasterFadeDuration,
    );
  }

  @override
  List<Object?> get props => [
    rasterOpacity,
    rasterHueRotate,
    rasterBrightnessMin,
    rasterBrightnessMax,
    rasterSaturation,
    rasterContrast,
    rasterResampling,
    rasterFadeDuration,
  ];

  @override
  bool get stringify => true;
}

class PaintHillshade extends Paint with EquatableMixin {
  const PaintHillshade({
    required this.hillshadeIlluminationDirection,
    required this.hillshadeIlluminationAnchor,
    required this.hillshadeExaggeration,
    required this.hillshadeShadowColor,
    required this.hillshadeHighlightColor,
    required this.hillshadeAccentColor,
  });

  factory PaintHillshade.withDefaults({
    DataConstantProperty<num>? hillshadeIlluminationDirection,
    DataConstantProperty<PaintHillshade$HillshadeIlluminationAnchor>? hillshadeIlluminationAnchor,
    DataConstantProperty<num>? hillshadeExaggeration,
    DataConstantProperty<Color>? hillshadeShadowColor,
    DataConstantProperty<Color>? hillshadeHighlightColor,
    DataConstantProperty<Color>? hillshadeAccentColor,
  }) {
    return PaintHillshade(
      hillshadeIlluminationDirection: hillshadeIlluminationDirection?.withDefaultValue(335) ?? DataConstantProperty<num>.value(335),
      hillshadeIlluminationAnchor: hillshadeIlluminationAnchor?.withDefaultValue(PaintHillshade$HillshadeIlluminationAnchor.viewport) ?? DataConstantProperty<PaintHillshade$HillshadeIlluminationAnchor>.value(PaintHillshade$HillshadeIlluminationAnchor.viewport),
      hillshadeExaggeration: hillshadeExaggeration?.withDefaultValue(0.5) ?? DataConstantProperty<num>.value(0.5),
      hillshadeShadowColor: hillshadeShadowColor?.withDefaultValue(Color.fromJson('#000000')) ?? DataConstantProperty<Color>.value(Color.fromJson('#000000')),
      hillshadeHighlightColor: hillshadeHighlightColor?.withDefaultValue(Color.fromJson('#FFFFFF')) ?? DataConstantProperty<Color>.value(Color.fromJson('#FFFFFF')),
      hillshadeAccentColor: hillshadeAccentColor?.withDefaultValue(Color.fromJson('#000000')) ?? DataConstantProperty<Color>.value(Color.fromJson('#000000')),
    );
  }

  factory PaintHillshade.fromJson(Map<String, dynamic> json) {
    return PaintHillshade.withDefaults(
      hillshadeIlluminationDirection: json['hillshade-illumination-direction'] != null? DataConstantProperty<num>.fromJson(json['hillshade-illumination-direction']) : null,
      hillshadeIlluminationAnchor: json['hillshade-illumination-anchor'] != null? DataConstantProperty<PaintHillshade$HillshadeIlluminationAnchor>.fromJson(json['hillshade-illumination-anchor']) : null,
      hillshadeExaggeration: json['hillshade-exaggeration'] != null? DataConstantProperty<num>.fromJson(json['hillshade-exaggeration']) : null,
      hillshadeShadowColor: json['hillshade-shadow-color'] != null? DataConstantProperty<Color>.fromJson(json['hillshade-shadow-color']) : null,
      hillshadeHighlightColor: json['hillshade-highlight-color'] != null? DataConstantProperty<Color>.fromJson(json['hillshade-highlight-color']) : null,
      hillshadeAccentColor: json['hillshade-accent-color'] != null? DataConstantProperty<Color>.fromJson(json['hillshade-accent-color']) : null,
    );
  }

  /// The direction of the light source used to generate the hillshading with 0 as the top of the viewport if `hillshade-illumination-anchor` is set to `viewport` and due north if `hillshade-illumination-anchor` is set to `map`.
  final DataConstantProperty<num> hillshadeIlluminationDirection;

  /// Direction of light source when map is rotated.
  final DataConstantProperty<PaintHillshade$HillshadeIlluminationAnchor> hillshadeIlluminationAnchor;

  /// Intensity of the hillshade
  final DataConstantProperty<num> hillshadeExaggeration;

  /// The shading color of areas that face away from the light source.
  final DataConstantProperty<Color> hillshadeShadowColor;

  /// The shading color of areas that faces towards the light source.
  final DataConstantProperty<Color> hillshadeHighlightColor;

  /// The shading color used to accentuate rugged terrain like sharp cliffs and gorges.
  final DataConstantProperty<Color> hillshadeAccentColor;

  PaintHillshade copyWith({
    DataConstantProperty<num>? hillshadeIlluminationDirection,
    DataConstantProperty<PaintHillshade$HillshadeIlluminationAnchor>? hillshadeIlluminationAnchor,
    DataConstantProperty<num>? hillshadeExaggeration,
    DataConstantProperty<Color>? hillshadeShadowColor,
    DataConstantProperty<Color>? hillshadeHighlightColor,
    DataConstantProperty<Color>? hillshadeAccentColor,
  }) {
    return PaintHillshade(
      hillshadeIlluminationDirection: hillshadeIlluminationDirection ?? this.hillshadeIlluminationDirection,
      hillshadeIlluminationAnchor: hillshadeIlluminationAnchor ?? this.hillshadeIlluminationAnchor,
      hillshadeExaggeration: hillshadeExaggeration ?? this.hillshadeExaggeration,
      hillshadeShadowColor: hillshadeShadowColor ?? this.hillshadeShadowColor,
      hillshadeHighlightColor: hillshadeHighlightColor ?? this.hillshadeHighlightColor,
      hillshadeAccentColor: hillshadeAccentColor ?? this.hillshadeAccentColor,
    );
  }

  @override
  List<Object?> get props => [
    hillshadeIlluminationDirection,
    hillshadeIlluminationAnchor,
    hillshadeExaggeration,
    hillshadeShadowColor,
    hillshadeHighlightColor,
    hillshadeAccentColor,
  ];

  @override
  bool get stringify => true;
}

class PaintBackground extends Paint with EquatableMixin {
  const PaintBackground({
    required this.backgroundColor,
    this.backgroundPattern,
    required this.backgroundOpacity,
  });

  factory PaintBackground.withDefaults({
    DataConstantProperty<Color>? backgroundColor,
    CrossFadedProperty<ResolvedImage>? backgroundPattern,
    DataConstantProperty<num>? backgroundOpacity,
  }) {
    return PaintBackground(
      backgroundColor: backgroundColor?.withDefaultValue(Color.fromJson('#000000')) ?? DataConstantProperty<Color>.value(Color.fromJson('#000000')),
      backgroundPattern: backgroundPattern,
      backgroundOpacity: backgroundOpacity?.withDefaultValue(1) ?? DataConstantProperty<num>.value(1),
    );
  }

  factory PaintBackground.fromJson(Map<String, dynamic> json) {
    return PaintBackground.withDefaults(
      backgroundColor: json['background-color'] != null? DataConstantProperty<Color>.fromJson(json['background-color']) : null,
      backgroundPattern: json['background-pattern'] != null? CrossFadedProperty<ResolvedImage>.fromJson(json['background-pattern']) : null,
      backgroundOpacity: json['background-opacity'] != null? DataConstantProperty<num>.fromJson(json['background-opacity']) : null,
    );
  }

  /// The color with which the background will be drawn.
  final DataConstantProperty<Color> backgroundColor;

  /// Name of image in sprite to use for drawing an image background. For seamless patterns, image width and height must be a factor of two (2, 4, 8, ..., 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.
  final CrossFadedProperty<ResolvedImage>? backgroundPattern;

  /// The opacity at which the background will be drawn.
  final DataConstantProperty<num> backgroundOpacity;

  PaintBackground copyWith({
    DataConstantProperty<Color>? backgroundColor,
    CrossFadedProperty<ResolvedImage>? backgroundPattern,
    DataConstantProperty<num>? backgroundOpacity,
  }) {
    return PaintBackground(
      backgroundColor: backgroundColor ?? this.backgroundColor,
      backgroundPattern: backgroundPattern ?? this.backgroundPattern,
      backgroundOpacity: backgroundOpacity ?? this.backgroundOpacity,
    );
  }

  @override
  List<Object?> get props => [
    backgroundColor,
    backgroundPattern,
    backgroundOpacity,
  ];

  @override
  bool get stringify => true;
}

class Transition with EquatableMixin {
  const Transition({
    required this.duration,
    required this.delay,
  });

  factory Transition.withDefaults({
    num? duration,
    num? delay,
  }) {
    return Transition(
      duration: duration ?? 300,
      delay: delay ?? 0,
    );
  }

  factory Transition.fromJson(Map<String, dynamic> json) {
    return Transition.withDefaults(
      duration: json['duration'] != null? json['duration'] as num : null,
      delay: json['delay'] != null? json['delay'] as num : null,
    );
  }

  /// Time allotted for transitions to complete.
  final num duration;

  /// Length of time before a transition begins.
  final num delay;

  Transition copyWith({
    num? duration,
    num? delay,
  }) {
    return Transition(
      duration: duration ?? this.duration,
      delay: delay ?? this.delay,
    );
  }

  @override
  List<Object?> get props => [
    duration,
    delay,
  ];

  @override
  bool get stringify => true;
}

/// A helper sealed class to make matching on [Source] types easier
sealed class Source {
  const Source();

  factory Source.fromJson(Map<String, dynamic> json) {
    return switch(json['type'] as String) {
      'vector' => SourceVector.fromJson(json) as Source,
      'raster' => SourceRaster.fromJson(json) as Source,
      'raster-dem' => SourceRasterDem.fromJson(json) as Source,
      'geojson' => SourceGeoJson.fromJson(json) as Source,
      'video' => SourceVideo.fromJson(json) as Source,
      'image' => SourceImage.fromJson(json) as Source,
      _ => throw Exception('Unknown source type: ${json['type']}'),
    };
  }
}

/// A helper sealed class to make matching on [Layout] types easier
sealed class Layout {
  const Layout();

  factory Layout.fromJson(Map<String, dynamic> json, {required Layer$Type type}) {
    return switch(type) {
      Layer$Type.background => LayoutBackground.fromJson(json) as Layout,
      Layer$Type.fill => LayoutFill.fromJson(json) as Layout,
      Layer$Type.circle => LayoutCircle.fromJson(json) as Layout,
      Layer$Type.heatmap => LayoutHeatmap.fromJson(json) as Layout,
      Layer$Type.fillExtrusion => LayoutFillExtrusion.fromJson(json) as Layout,
      Layer$Type.line => LayoutLine.fromJson(json) as Layout,
      Layer$Type.symbol => LayoutSymbol.fromJson(json) as Layout,
      Layer$Type.raster => LayoutRaster.fromJson(json) as Layout,
      Layer$Type.hillshade => LayoutHillshade.fromJson(json) as Layout,
    };
  }
}

/// A helper sealed class to make matching on [Paint] types easier
sealed class Paint {
  const Paint();

  factory Paint.fromJson(Map<String, dynamic> json, {required Layer$Type type}) {
    return switch(type) {
      Layer$Type.fill => PaintFill.fromJson(json) as Paint,
      Layer$Type.fillExtrusion => PaintFillExtrusion.fromJson(json) as Paint,
      Layer$Type.line => PaintLine.fromJson(json) as Paint,
      Layer$Type.circle => PaintCircle.fromJson(json) as Paint,
      Layer$Type.heatmap => PaintHeatmap.fromJson(json) as Paint,
      Layer$Type.symbol => PaintSymbol.fromJson(json) as Paint,
      Layer$Type.raster => PaintRaster.fromJson(json) as Paint,
      Layer$Type.hillshade => PaintHillshade.fromJson(json) as Paint,
      Layer$Type.background => PaintBackground.fromJson(json) as Paint,
    };
  }
}

/// A helper extension type to set correct accessors for [Layout] and [Paint] fields for a [Layer] with type [Layer$Type.background]
extension type LayerBackground._(Layer layer) implements Layer {
  LayerBackground(this.layer): assert(layer.type == Layer$Type.background);

  LayoutBackground get layout => layer.layout as LayoutBackground;
  PaintBackground get paint => layer.paint as PaintBackground;
}

/// A helper extension type to set correct accessors for [Layout] and [Paint] fields for a [Layer] with type [Layer$Type.fill]
extension type LayerFill._(Layer layer) implements Layer {
  LayerFill(this.layer): assert(layer.type == Layer$Type.fill);

  LayoutFill get layout => layer.layout as LayoutFill;
  PaintFill get paint => layer.paint as PaintFill;
}

/// A helper extension type to set correct accessors for [Layout] and [Paint] fields for a [Layer] with type [Layer$Type.circle]
extension type LayerCircle._(Layer layer) implements Layer {
  LayerCircle(this.layer): assert(layer.type == Layer$Type.circle);

  LayoutCircle get layout => layer.layout as LayoutCircle;
  PaintCircle get paint => layer.paint as PaintCircle;
}

/// A helper extension type to set correct accessors for [Layout] and [Paint] fields for a [Layer] with type [Layer$Type.heatmap]
extension type LayerHeatmap._(Layer layer) implements Layer {
  LayerHeatmap(this.layer): assert(layer.type == Layer$Type.heatmap);

  LayoutHeatmap get layout => layer.layout as LayoutHeatmap;
  PaintHeatmap get paint => layer.paint as PaintHeatmap;
}

/// A helper extension type to set correct accessors for [Layout] and [Paint] fields for a [Layer] with type [Layer$Type.fillExtrusion]
extension type LayerFillExtrusion._(Layer layer) implements Layer {
  LayerFillExtrusion(this.layer): assert(layer.type == Layer$Type.fillExtrusion);

  LayoutFillExtrusion get layout => layer.layout as LayoutFillExtrusion;
  PaintFillExtrusion get paint => layer.paint as PaintFillExtrusion;
}

/// A helper extension type to set correct accessors for [Layout] and [Paint] fields for a [Layer] with type [Layer$Type.line]
extension type LayerLine._(Layer layer) implements Layer {
  LayerLine(this.layer): assert(layer.type == Layer$Type.line);

  LayoutLine get layout => layer.layout as LayoutLine;
  PaintLine get paint => layer.paint as PaintLine;
}

/// A helper extension type to set correct accessors for [Layout] and [Paint] fields for a [Layer] with type [Layer$Type.symbol]
extension type LayerSymbol._(Layer layer) implements Layer {
  LayerSymbol(this.layer): assert(layer.type == Layer$Type.symbol);

  LayoutSymbol get layout => layer.layout as LayoutSymbol;
  PaintSymbol get paint => layer.paint as PaintSymbol;
}

/// A helper extension type to set correct accessors for [Layout] and [Paint] fields for a [Layer] with type [Layer$Type.raster]
extension type LayerRaster._(Layer layer) implements Layer {
  LayerRaster(this.layer): assert(layer.type == Layer$Type.raster);

  LayoutRaster get layout => layer.layout as LayoutRaster;
  PaintRaster get paint => layer.paint as PaintRaster;
}

/// A helper extension type to set correct accessors for [Layout] and [Paint] fields for a [Layer] with type [Layer$Type.hillshade]
extension type LayerHillshade._(Layer layer) implements Layer {
  LayerHillshade(this.layer): assert(layer.type == Layer$Type.hillshade);

  LayoutHillshade get layout => layer.layout as LayoutHillshade;
  PaintHillshade get paint => layer.paint as PaintHillshade;
}

enum SourceVector$Type {
  /// A vector tile source.
  vector;

  static SourceVector$Type fromJson(String json) {
    return switch (json) {
      'vector' => SourceVector$Type.vector,
      _ => throw Exception('Unknown SourceVector\$Type: $json'),
    };
  }
}

enum SourceVector$Scheme {
  /// Slippy map tilenames scheme.
  xyz,
  /// OSGeo spec scheme.
  tms;

  static SourceVector$Scheme fromJson(String json) {
    return switch (json) {
      'xyz' => SourceVector$Scheme.xyz,
      'tms' => SourceVector$Scheme.tms,
      _ => throw Exception('Unknown SourceVector\$Scheme: $json'),
    };
  }
}

enum SourceRaster$Type {
  /// A raster tile source.
  raster;

  static SourceRaster$Type fromJson(String json) {
    return switch (json) {
      'raster' => SourceRaster$Type.raster,
      _ => throw Exception('Unknown SourceRaster\$Type: $json'),
    };
  }
}

enum SourceRaster$Scheme {
  /// Slippy map tilenames scheme.
  xyz,
  /// OSGeo spec scheme.
  tms;

  static SourceRaster$Scheme fromJson(String json) {
    return switch (json) {
      'xyz' => SourceRaster$Scheme.xyz,
      'tms' => SourceRaster$Scheme.tms,
      _ => throw Exception('Unknown SourceRaster\$Scheme: $json'),
    };
  }
}

enum SourceRasterDem$Type {
  /// A RGB-encoded raster DEM source
  rasterDem;

  static SourceRasterDem$Type fromJson(String json) {
    return switch (json) {
      'raster-dem' => SourceRasterDem$Type.rasterDem,
      _ => throw Exception('Unknown SourceRasterDem\$Type: $json'),
    };
  }
}

enum SourceRasterDem$Encoding {
  /// Terrarium format PNG tiles. See https://aws.amazon.com/es/public-datasets/terrain/ for more info.
  terrarium,
  /// Mapbox Terrain RGB tiles. See https://www.mapbox.com/help/access-elevation-data/#mapbox-terrain-rgb for more info.
  mapbox,
  /// Decodes tiles using the redFactor, blueFactor, greenFactor, baseShift parameters.
  custom;

  static SourceRasterDem$Encoding fromJson(String json) {
    return switch (json) {
      'terrarium' => SourceRasterDem$Encoding.terrarium,
      'mapbox' => SourceRasterDem$Encoding.mapbox,
      'custom' => SourceRasterDem$Encoding.custom,
      _ => throw Exception('Unknown SourceRasterDem\$Encoding: $json'),
    };
  }
}

enum SourceGeoJson$Type {
  /// A GeoJSON data source.
  geojson;

  static SourceGeoJson$Type fromJson(String json) {
    return switch (json) {
      'geojson' => SourceGeoJson$Type.geojson,
      _ => throw Exception('Unknown SourceGeoJson\$Type: $json'),
    };
  }
}

enum SourceVideo$Type {
  /// A video data source.
  video;

  static SourceVideo$Type fromJson(String json) {
    return switch (json) {
      'video' => SourceVideo$Type.video,
      _ => throw Exception('Unknown SourceVideo\$Type: $json'),
    };
  }
}

enum SourceImage$Type {
  /// An image data source.
  image;

  static SourceImage$Type fromJson(String json) {
    return switch (json) {
      'image' => SourceImage$Type.image,
      _ => throw Exception('Unknown SourceImage\$Type: $json'),
    };
  }
}

enum Layer$Type {
  /// A filled polygon with an optional stroked border.
  fill,
  /// A stroked line.
  line,
  /// An icon or a text label.
  symbol,
  /// A filled circle.
  circle,
  /// A heatmap.
  heatmap,
  /// An extruded (3D) polygon.
  fillExtrusion,
  /// Raster map textures such as satellite imagery.
  raster,
  /// Client-side hillshading visualization based on DEM data. The implementation supports Mapbox Terrain RGB, Mapzen Terrarium tiles and custom encodings.
  hillshade,
  /// The background color or pattern of the map.
  background;

  static Layer$Type fromJson(String json) {
    return switch (json) {
      'fill' => Layer$Type.fill,
      'line' => Layer$Type.line,
      'symbol' => Layer$Type.symbol,
      'circle' => Layer$Type.circle,
      'heatmap' => Layer$Type.heatmap,
      'fill-extrusion' => Layer$Type.fillExtrusion,
      'raster' => Layer$Type.raster,
      'hillshade' => Layer$Type.hillshade,
      'background' => Layer$Type.background,
      _ => throw Exception('Unknown Layer\$Type: $json'),
    };
  }
}

enum Visibility {
  /// The layer is shown.
  visible,
  /// The layer is not shown.
  none;

  static Visibility fromJson(String json) {
    return switch (json) {
      'visible' => Visibility.visible,
      'none' => Visibility.none,
      _ => throw Exception('Unknown Visibility: $json'),
    };
  }
}

enum LayoutLine$LineCap {
  /// A cap with a squared-off end which is drawn to the exact endpoint of the line.
  butt,
  /// A cap with a rounded end which is drawn beyond the endpoint of the line at a radius of one-half of the line's width and centered on the endpoint of the line.
  round,
  /// A cap with a squared-off end which is drawn beyond the endpoint of the line at a distance of one-half of the line's width.
  square;

  static LayoutLine$LineCap fromJson(String json) {
    return switch (json) {
      'butt' => LayoutLine$LineCap.butt,
      'round' => LayoutLine$LineCap.round,
      'square' => LayoutLine$LineCap.square,
      _ => throw Exception('Unknown LayoutLine\$LineCap: $json'),
    };
  }
}

enum LayoutLine$LineJoin {
  /// A join with a squared-off end which is drawn beyond the endpoint of the line at a distance of one-half of the line's width.
  bevel,
  /// A join with a rounded end which is drawn beyond the endpoint of the line at a radius of one-half of the line's width and centered on the endpoint of the line.
  round,
  /// A join with a sharp, angled corner which is drawn with the outer sides beyond the endpoint of the path until they meet.
  miter;

  static LayoutLine$LineJoin fromJson(String json) {
    return switch (json) {
      'bevel' => LayoutLine$LineJoin.bevel,
      'round' => LayoutLine$LineJoin.round,
      'miter' => LayoutLine$LineJoin.miter,
      _ => throw Exception('Unknown LayoutLine\$LineJoin: $json'),
    };
  }
}

enum LayoutSymbol$SymbolPlacement {
  /// The label is placed at the point where the geometry is located.
  point,
  /// The label is placed along the line of the geometry. Can only be used on `LineString` and `Polygon` geometries.
  line,
  /// The label is placed at the center of the line of the geometry. Can only be used on `LineString` and `Polygon` geometries. Note that a single feature in a vector tile may contain multiple line geometries.
  lineCenter;

  static LayoutSymbol$SymbolPlacement fromJson(String json) {
    return switch (json) {
      'point' => LayoutSymbol$SymbolPlacement.point,
      'line' => LayoutSymbol$SymbolPlacement.line,
      'line-center' => LayoutSymbol$SymbolPlacement.lineCenter,
      _ => throw Exception('Unknown LayoutSymbol\$SymbolPlacement: $json'),
    };
  }
}

enum LayoutSymbol$SymbolZOrder {
  /// Sorts symbols by `symbol-sort-key` if set. Otherwise, sorts symbols by their y-position relative to the viewport if `icon-allow-overlap` or `text-allow-overlap` is set to `true` or `icon-ignore-placement` or `text-ignore-placement` is `false`.
  auto,
  /// Sorts symbols by their y-position relative to the viewport if `icon-allow-overlap` or `text-allow-overlap` is set to `true` or `icon-ignore-placement` or `text-ignore-placement` is `false`.
  viewportY,
  /// Sorts symbols by `symbol-sort-key` if set. Otherwise, no sorting is applied; symbols are rendered in the same order as the source data.
  source;

  static LayoutSymbol$SymbolZOrder fromJson(String json) {
    return switch (json) {
      'auto' => LayoutSymbol$SymbolZOrder.auto,
      'viewport-y' => LayoutSymbol$SymbolZOrder.viewportY,
      'source' => LayoutSymbol$SymbolZOrder.source,
      _ => throw Exception('Unknown LayoutSymbol\$SymbolZOrder: $json'),
    };
  }
}

enum LayoutSymbol$IconOverlap {
  /// The icon will be hidden if it collides with any other previously drawn symbol.
  never,
  /// The icon will be visible even if it collides with any other previously drawn symbol.
  always,
  /// If the icon collides with another previously drawn symbol, the overlap mode for that symbol is checked. If the previous symbol was placed using `never` overlap mode, the new icon is hidden. If the previous symbol was placed using `always` or `cooperative` overlap mode, the new icon is visible.
  cooperative;

  static LayoutSymbol$IconOverlap fromJson(String json) {
    return switch (json) {
      'never' => LayoutSymbol$IconOverlap.never,
      'always' => LayoutSymbol$IconOverlap.always,
      'cooperative' => LayoutSymbol$IconOverlap.cooperative,
      _ => throw Exception('Unknown LayoutSymbol\$IconOverlap: $json'),
    };
  }
}

enum LayoutSymbol$IconRotationAlignment {
  /// When `symbol-placement` is set to `point`, aligns icons east-west. When `symbol-placement` is set to `line` or `line-center`, aligns icon x-axes with the line.
  map,
  /// Produces icons whose x-axes are aligned with the x-axis of the viewport, regardless of the value of `symbol-placement`.
  viewport,
  /// When `symbol-placement` is set to `point`, this is equivalent to `viewport`. When `symbol-placement` is set to `line` or `line-center`, this is equivalent to `map`.
  auto;

  static LayoutSymbol$IconRotationAlignment fromJson(String json) {
    return switch (json) {
      'map' => LayoutSymbol$IconRotationAlignment.map,
      'viewport' => LayoutSymbol$IconRotationAlignment.viewport,
      'auto' => LayoutSymbol$IconRotationAlignment.auto,
      _ => throw Exception('Unknown LayoutSymbol\$IconRotationAlignment: $json'),
    };
  }
}

enum LayoutSymbol$IconTextFit {
  /// The icon is displayed at its intrinsic aspect ratio.
  none,
  /// The icon is scaled in the x-dimension to fit the width of the text.
  width,
  /// The icon is scaled in the y-dimension to fit the height of the text.
  height,
  /// The icon is scaled in both x- and y-dimensions.
  both;

  static LayoutSymbol$IconTextFit fromJson(String json) {
    return switch (json) {
      'none' => LayoutSymbol$IconTextFit.none,
      'width' => LayoutSymbol$IconTextFit.width,
      'height' => LayoutSymbol$IconTextFit.height,
      'both' => LayoutSymbol$IconTextFit.both,
      _ => throw Exception('Unknown LayoutSymbol\$IconTextFit: $json'),
    };
  }
}

enum LayoutSymbol$IconAnchor {
  /// The center of the icon is placed closest to the anchor.
  center,
  /// The left side of the icon is placed closest to the anchor.
  left,
  /// The right side of the icon is placed closest to the anchor.
  right,
  /// The top of the icon is placed closest to the anchor.
  top,
  /// The bottom of the icon is placed closest to the anchor.
  bottom,
  /// The top left corner of the icon is placed closest to the anchor.
  topLeft,
  /// The top right corner of the icon is placed closest to the anchor.
  topRight,
  /// The bottom left corner of the icon is placed closest to the anchor.
  bottomLeft,
  /// The bottom right corner of the icon is placed closest to the anchor.
  bottomRight;

  static LayoutSymbol$IconAnchor fromJson(String json) {
    return switch (json) {
      'center' => LayoutSymbol$IconAnchor.center,
      'left' => LayoutSymbol$IconAnchor.left,
      'right' => LayoutSymbol$IconAnchor.right,
      'top' => LayoutSymbol$IconAnchor.top,
      'bottom' => LayoutSymbol$IconAnchor.bottom,
      'top-left' => LayoutSymbol$IconAnchor.topLeft,
      'top-right' => LayoutSymbol$IconAnchor.topRight,
      'bottom-left' => LayoutSymbol$IconAnchor.bottomLeft,
      'bottom-right' => LayoutSymbol$IconAnchor.bottomRight,
      _ => throw Exception('Unknown LayoutSymbol\$IconAnchor: $json'),
    };
  }
}

enum LayoutSymbol$IconPitchAlignment {
  /// The icon is aligned to the plane of the map.
  map,
  /// The icon is aligned to the plane of the viewport.
  viewport,
  /// Automatically matches the value of `icon-rotation-alignment`.
  auto;

  static LayoutSymbol$IconPitchAlignment fromJson(String json) {
    return switch (json) {
      'map' => LayoutSymbol$IconPitchAlignment.map,
      'viewport' => LayoutSymbol$IconPitchAlignment.viewport,
      'auto' => LayoutSymbol$IconPitchAlignment.auto,
      _ => throw Exception('Unknown LayoutSymbol\$IconPitchAlignment: $json'),
    };
  }
}

enum LayoutSymbol$TextPitchAlignment {
  /// The text is aligned to the plane of the map.
  map,
  /// The text is aligned to the plane of the viewport.
  viewport,
  /// Automatically matches the value of `text-rotation-alignment`.
  auto;

  static LayoutSymbol$TextPitchAlignment fromJson(String json) {
    return switch (json) {
      'map' => LayoutSymbol$TextPitchAlignment.map,
      'viewport' => LayoutSymbol$TextPitchAlignment.viewport,
      'auto' => LayoutSymbol$TextPitchAlignment.auto,
      _ => throw Exception('Unknown LayoutSymbol\$TextPitchAlignment: $json'),
    };
  }
}

enum LayoutSymbol$TextRotationAlignment {
  /// When `symbol-placement` is set to `point`, aligns text east-west. When `symbol-placement` is set to `line` or `line-center`, aligns text x-axes with the line.
  map,
  /// Produces glyphs whose x-axes are aligned with the x-axis of the viewport, regardless of the value of `symbol-placement`.
  viewport,
  /// When `symbol-placement` is set to `point`, aligns text to the x-axis of the viewport. When `symbol-placement` is set to `line` or `line-center`, aligns glyphs to the x-axis of the viewport and places them along the line.
  viewportGlyph,
  /// When `symbol-placement` is set to `point`, this is equivalent to `viewport`. When `symbol-placement` is set to `line` or `line-center`, this is equivalent to `map`.
  auto;

  static LayoutSymbol$TextRotationAlignment fromJson(String json) {
    return switch (json) {
      'map' => LayoutSymbol$TextRotationAlignment.map,
      'viewport' => LayoutSymbol$TextRotationAlignment.viewport,
      'viewport-glyph' => LayoutSymbol$TextRotationAlignment.viewportGlyph,
      'auto' => LayoutSymbol$TextRotationAlignment.auto,
      _ => throw Exception('Unknown LayoutSymbol\$TextRotationAlignment: $json'),
    };
  }
}

enum LayoutSymbol$TextJustify {
  /// The text is aligned towards the anchor position.
  auto,
  /// The text is aligned to the left.
  left,
  /// The text is centered.
  center,
  /// The text is aligned to the right.
  right;

  static LayoutSymbol$TextJustify fromJson(String json) {
    return switch (json) {
      'auto' => LayoutSymbol$TextJustify.auto,
      'left' => LayoutSymbol$TextJustify.left,
      'center' => LayoutSymbol$TextJustify.center,
      'right' => LayoutSymbol$TextJustify.right,
      _ => throw Exception('Unknown LayoutSymbol\$TextJustify: $json'),
    };
  }
}

enum LayoutSymbol$TextVariableAnchor {
  /// The center of the text is placed closest to the anchor.
  center,
  /// The left side of the text is placed closest to the anchor.
  left,
  /// The right side of the text is placed closest to the anchor.
  right,
  /// The top of the text is placed closest to the anchor.
  top,
  /// The bottom of the text is placed closest to the anchor.
  bottom,
  /// The top left corner of the text is placed closest to the anchor.
  topLeft,
  /// The top right corner of the text is placed closest to the anchor.
  topRight,
  /// The bottom left corner of the text is placed closest to the anchor.
  bottomLeft,
  /// The bottom right corner of the text is placed closest to the anchor.
  bottomRight;

  static LayoutSymbol$TextVariableAnchor fromJson(String json) {
    return switch (json) {
      'center' => LayoutSymbol$TextVariableAnchor.center,
      'left' => LayoutSymbol$TextVariableAnchor.left,
      'right' => LayoutSymbol$TextVariableAnchor.right,
      'top' => LayoutSymbol$TextVariableAnchor.top,
      'bottom' => LayoutSymbol$TextVariableAnchor.bottom,
      'top-left' => LayoutSymbol$TextVariableAnchor.topLeft,
      'top-right' => LayoutSymbol$TextVariableAnchor.topRight,
      'bottom-left' => LayoutSymbol$TextVariableAnchor.bottomLeft,
      'bottom-right' => LayoutSymbol$TextVariableAnchor.bottomRight,
      _ => throw Exception('Unknown LayoutSymbol\$TextVariableAnchor: $json'),
    };
  }
}

enum LayoutSymbol$TextAnchor {
  /// The center of the text is placed closest to the anchor.
  center,
  /// The left side of the text is placed closest to the anchor.
  left,
  /// The right side of the text is placed closest to the anchor.
  right,
  /// The top of the text is placed closest to the anchor.
  top,
  /// The bottom of the text is placed closest to the anchor.
  bottom,
  /// The top left corner of the text is placed closest to the anchor.
  topLeft,
  /// The top right corner of the text is placed closest to the anchor.
  topRight,
  /// The bottom left corner of the text is placed closest to the anchor.
  bottomLeft,
  /// The bottom right corner of the text is placed closest to the anchor.
  bottomRight;

  static LayoutSymbol$TextAnchor fromJson(String json) {
    return switch (json) {
      'center' => LayoutSymbol$TextAnchor.center,
      'left' => LayoutSymbol$TextAnchor.left,
      'right' => LayoutSymbol$TextAnchor.right,
      'top' => LayoutSymbol$TextAnchor.top,
      'bottom' => LayoutSymbol$TextAnchor.bottom,
      'top-left' => LayoutSymbol$TextAnchor.topLeft,
      'top-right' => LayoutSymbol$TextAnchor.topRight,
      'bottom-left' => LayoutSymbol$TextAnchor.bottomLeft,
      'bottom-right' => LayoutSymbol$TextAnchor.bottomRight,
      _ => throw Exception('Unknown LayoutSymbol\$TextAnchor: $json'),
    };
  }
}

enum LayoutSymbol$TextWritingMode {
  /// If a text's language supports horizontal writing mode, symbols with point placement would be laid out horizontally.
  horizontal,
  /// If a text's language supports vertical writing mode, symbols with point placement would be laid out vertically.
  vertical;

  static LayoutSymbol$TextWritingMode fromJson(String json) {
    return switch (json) {
      'horizontal' => LayoutSymbol$TextWritingMode.horizontal,
      'vertical' => LayoutSymbol$TextWritingMode.vertical,
      _ => throw Exception('Unknown LayoutSymbol\$TextWritingMode: $json'),
    };
  }
}

enum LayoutSymbol$TextTransform {
  /// The text is not altered.
  none,
  /// Forces all letters to be displayed in uppercase.
  uppercase,
  /// Forces all letters to be displayed in lowercase.
  lowercase;

  static LayoutSymbol$TextTransform fromJson(String json) {
    return switch (json) {
      'none' => LayoutSymbol$TextTransform.none,
      'uppercase' => LayoutSymbol$TextTransform.uppercase,
      'lowercase' => LayoutSymbol$TextTransform.lowercase,
      _ => throw Exception('Unknown LayoutSymbol\$TextTransform: $json'),
    };
  }
}

enum LayoutSymbol$TextOverlap {
  /// The text will be hidden if it collides with any other previously drawn symbol.
  never,
  /// The text will be visible even if it collides with any other previously drawn symbol.
  always,
  /// If the text collides with another previously drawn symbol, the overlap mode for that symbol is checked. If the previous symbol was placed using `never` overlap mode, the new text is hidden. If the previous symbol was placed using `always` or `cooperative` overlap mode, the new text is visible.
  cooperative;

  static LayoutSymbol$TextOverlap fromJson(String json) {
    return switch (json) {
      'never' => LayoutSymbol$TextOverlap.never,
      'always' => LayoutSymbol$TextOverlap.always,
      'cooperative' => LayoutSymbol$TextOverlap.cooperative,
      _ => throw Exception('Unknown LayoutSymbol\$TextOverlap: $json'),
    };
  }
}

enum Light$Anchor {
  /// The position of the light source is aligned to the rotation of the map.
  map,
  /// The position of the light source is aligned to the rotation of the viewport.
  viewport;

  static Light$Anchor fromJson(String json) {
    return switch (json) {
      'map' => Light$Anchor.map,
      'viewport' => Light$Anchor.viewport,
      _ => throw Exception('Unknown Light\$Anchor: $json'),
    };
  }
}

enum Projection$Type {
  /// The Mercator projection.
  mercator,
  /// The globe projection.
  globe;

  static Projection$Type fromJson(String json) {
    return switch (json) {
      'mercator' => Projection$Type.mercator,
      'globe' => Projection$Type.globe,
      _ => throw Exception('Unknown Projection\$Type: $json'),
    };
  }
}

enum PaintFill$FillTranslateAnchor {
  /// The fill is translated relative to the map.
  map,
  /// The fill is translated relative to the viewport.
  viewport;

  static PaintFill$FillTranslateAnchor fromJson(String json) {
    return switch (json) {
      'map' => PaintFill$FillTranslateAnchor.map,
      'viewport' => PaintFill$FillTranslateAnchor.viewport,
      _ => throw Exception('Unknown PaintFill\$FillTranslateAnchor: $json'),
    };
  }
}

enum PaintFillExtrusion$FillExtrusionTranslateAnchor {
  /// The fill extrusion is translated relative to the map.
  map,
  /// The fill extrusion is translated relative to the viewport.
  viewport;

  static PaintFillExtrusion$FillExtrusionTranslateAnchor fromJson(String json) {
    return switch (json) {
      'map' => PaintFillExtrusion$FillExtrusionTranslateAnchor.map,
      'viewport' => PaintFillExtrusion$FillExtrusionTranslateAnchor.viewport,
      _ => throw Exception('Unknown PaintFillExtrusion\$FillExtrusionTranslateAnchor: $json'),
    };
  }
}

enum PaintLine$LineTranslateAnchor {
  /// The line is translated relative to the map.
  map,
  /// The line is translated relative to the viewport.
  viewport;

  static PaintLine$LineTranslateAnchor fromJson(String json) {
    return switch (json) {
      'map' => PaintLine$LineTranslateAnchor.map,
      'viewport' => PaintLine$LineTranslateAnchor.viewport,
      _ => throw Exception('Unknown PaintLine\$LineTranslateAnchor: $json'),
    };
  }
}

enum PaintCircle$CircleTranslateAnchor {
  /// The circle is translated relative to the map.
  map,
  /// The circle is translated relative to the viewport.
  viewport;

  static PaintCircle$CircleTranslateAnchor fromJson(String json) {
    return switch (json) {
      'map' => PaintCircle$CircleTranslateAnchor.map,
      'viewport' => PaintCircle$CircleTranslateAnchor.viewport,
      _ => throw Exception('Unknown PaintCircle\$CircleTranslateAnchor: $json'),
    };
  }
}

enum PaintCircle$CirclePitchScale {
  /// Circles are scaled according to their apparent distance to the camera.
  map,
  /// Circles are not scaled.
  viewport;

  static PaintCircle$CirclePitchScale fromJson(String json) {
    return switch (json) {
      'map' => PaintCircle$CirclePitchScale.map,
      'viewport' => PaintCircle$CirclePitchScale.viewport,
      _ => throw Exception('Unknown PaintCircle\$CirclePitchScale: $json'),
    };
  }
}

enum PaintCircle$CirclePitchAlignment {
  /// The circle is aligned to the plane of the map.
  map,
  /// The circle is aligned to the plane of the viewport.
  viewport;

  static PaintCircle$CirclePitchAlignment fromJson(String json) {
    return switch (json) {
      'map' => PaintCircle$CirclePitchAlignment.map,
      'viewport' => PaintCircle$CirclePitchAlignment.viewport,
      _ => throw Exception('Unknown PaintCircle\$CirclePitchAlignment: $json'),
    };
  }
}

enum PaintSymbol$IconTranslateAnchor {
  /// Icons are translated relative to the map.
  map,
  /// Icons are translated relative to the viewport.
  viewport;

  static PaintSymbol$IconTranslateAnchor fromJson(String json) {
    return switch (json) {
      'map' => PaintSymbol$IconTranslateAnchor.map,
      'viewport' => PaintSymbol$IconTranslateAnchor.viewport,
      _ => throw Exception('Unknown PaintSymbol\$IconTranslateAnchor: $json'),
    };
  }
}

enum PaintSymbol$TextTranslateAnchor {
  /// The text is translated relative to the map.
  map,
  /// The text is translated relative to the viewport.
  viewport;

  static PaintSymbol$TextTranslateAnchor fromJson(String json) {
    return switch (json) {
      'map' => PaintSymbol$TextTranslateAnchor.map,
      'viewport' => PaintSymbol$TextTranslateAnchor.viewport,
      _ => throw Exception('Unknown PaintSymbol\$TextTranslateAnchor: $json'),
    };
  }
}

enum PaintRaster$RasterResampling {
  /// (Bi)linear filtering interpolates pixel values using the weighted average of the four closest original source pixels creating a smooth but blurry look when overscaled
  linear,
  /// Nearest neighbor filtering interpolates pixel values using the nearest original source pixel creating a sharp but pixelated look when overscaled
  nearest;

  static PaintRaster$RasterResampling fromJson(String json) {
    return switch (json) {
      'linear' => PaintRaster$RasterResampling.linear,
      'nearest' => PaintRaster$RasterResampling.nearest,
      _ => throw Exception('Unknown PaintRaster\$RasterResampling: $json'),
    };
  }
}

enum PaintHillshade$HillshadeIlluminationAnchor {
  /// The hillshade illumination is relative to the north direction.
  map,
  /// The hillshade illumination is relative to the top of the viewport.
  viewport;

  static PaintHillshade$HillshadeIlluminationAnchor fromJson(String json) {
    return switch (json) {
      'map' => PaintHillshade$HillshadeIlluminationAnchor.map,
      'viewport' => PaintHillshade$HillshadeIlluminationAnchor.viewport,
      _ => throw Exception('Unknown PaintHillshade\$HillshadeIlluminationAnchor: $json'),
    };
  }
}

bool isTypeEnum<T>() {
  return switch(T) {
    const (SourceVector$Type) => true,
    const (SourceVector$Scheme) => true,
    const (SourceRaster$Type) => true,
    const (SourceRaster$Scheme) => true,
    const (SourceRasterDem$Type) => true,
    const (SourceRasterDem$Encoding) => true,
    const (SourceGeoJson$Type) => true,
    const (SourceVideo$Type) => true,
    const (SourceImage$Type) => true,
    const (Layer$Type) => true,
    const (Visibility) => true,
    const (LayoutLine$LineCap) => true,
    const (LayoutLine$LineJoin) => true,
    const (LayoutSymbol$SymbolPlacement) => true,
    const (LayoutSymbol$SymbolZOrder) => true,
    const (LayoutSymbol$IconOverlap) => true,
    const (LayoutSymbol$IconRotationAlignment) => true,
    const (LayoutSymbol$IconTextFit) => true,
    const (LayoutSymbol$IconAnchor) => true,
    const (LayoutSymbol$IconPitchAlignment) => true,
    const (LayoutSymbol$TextPitchAlignment) => true,
    const (LayoutSymbol$TextRotationAlignment) => true,
    const (LayoutSymbol$TextJustify) => true,
    const (LayoutSymbol$TextVariableAnchor) => true,
    const (LayoutSymbol$TextAnchor) => true,
    const (LayoutSymbol$TextWritingMode) => true,
    const (LayoutSymbol$TextTransform) => true,
    const (LayoutSymbol$TextOverlap) => true,
    const (Light$Anchor) => true,
    const (Projection$Type) => true,
    const (PaintFill$FillTranslateAnchor) => true,
    const (PaintFillExtrusion$FillExtrusionTranslateAnchor) => true,
    const (PaintLine$LineTranslateAnchor) => true,
    const (PaintCircle$CircleTranslateAnchor) => true,
    const (PaintCircle$CirclePitchScale) => true,
    const (PaintCircle$CirclePitchAlignment) => true,
    const (PaintSymbol$IconTranslateAnchor) => true,
    const (PaintSymbol$TextTranslateAnchor) => true,
    const (PaintRaster$RasterResampling) => true,
    const (PaintHillshade$HillshadeIlluminationAnchor) => true,
    _ => false,
  };
}
T parseEnumJson<T>(dynamic json) {
  return switch(T) {
    const (SourceVector$Type) => SourceVector$Type.fromJson(json) as T,
    const (SourceVector$Scheme) => SourceVector$Scheme.fromJson(json) as T,
    const (SourceRaster$Type) => SourceRaster$Type.fromJson(json) as T,
    const (SourceRaster$Scheme) => SourceRaster$Scheme.fromJson(json) as T,
    const (SourceRasterDem$Type) => SourceRasterDem$Type.fromJson(json) as T,
    const (SourceRasterDem$Encoding) => SourceRasterDem$Encoding.fromJson(json) as T,
    const (SourceGeoJson$Type) => SourceGeoJson$Type.fromJson(json) as T,
    const (SourceVideo$Type) => SourceVideo$Type.fromJson(json) as T,
    const (SourceImage$Type) => SourceImage$Type.fromJson(json) as T,
    const (Layer$Type) => Layer$Type.fromJson(json) as T,
    const (Visibility) => Visibility.fromJson(json) as T,
    const (LayoutLine$LineCap) => LayoutLine$LineCap.fromJson(json) as T,
    const (LayoutLine$LineJoin) => LayoutLine$LineJoin.fromJson(json) as T,
    const (LayoutSymbol$SymbolPlacement) => LayoutSymbol$SymbolPlacement.fromJson(json) as T,
    const (LayoutSymbol$SymbolZOrder) => LayoutSymbol$SymbolZOrder.fromJson(json) as T,
    const (LayoutSymbol$IconOverlap) => LayoutSymbol$IconOverlap.fromJson(json) as T,
    const (LayoutSymbol$IconRotationAlignment) => LayoutSymbol$IconRotationAlignment.fromJson(json) as T,
    const (LayoutSymbol$IconTextFit) => LayoutSymbol$IconTextFit.fromJson(json) as T,
    const (LayoutSymbol$IconAnchor) => LayoutSymbol$IconAnchor.fromJson(json) as T,
    const (LayoutSymbol$IconPitchAlignment) => LayoutSymbol$IconPitchAlignment.fromJson(json) as T,
    const (LayoutSymbol$TextPitchAlignment) => LayoutSymbol$TextPitchAlignment.fromJson(json) as T,
    const (LayoutSymbol$TextRotationAlignment) => LayoutSymbol$TextRotationAlignment.fromJson(json) as T,
    const (LayoutSymbol$TextJustify) => LayoutSymbol$TextJustify.fromJson(json) as T,
    const (LayoutSymbol$TextVariableAnchor) => LayoutSymbol$TextVariableAnchor.fromJson(json) as T,
    const (LayoutSymbol$TextAnchor) => LayoutSymbol$TextAnchor.fromJson(json) as T,
    const (LayoutSymbol$TextWritingMode) => LayoutSymbol$TextWritingMode.fromJson(json) as T,
    const (LayoutSymbol$TextTransform) => LayoutSymbol$TextTransform.fromJson(json) as T,
    const (LayoutSymbol$TextOverlap) => LayoutSymbol$TextOverlap.fromJson(json) as T,
    const (Light$Anchor) => Light$Anchor.fromJson(json) as T,
    const (Projection$Type) => Projection$Type.fromJson(json) as T,
    const (PaintFill$FillTranslateAnchor) => PaintFill$FillTranslateAnchor.fromJson(json) as T,
    const (PaintFillExtrusion$FillExtrusionTranslateAnchor) => PaintFillExtrusion$FillExtrusionTranslateAnchor.fromJson(json) as T,
    const (PaintLine$LineTranslateAnchor) => PaintLine$LineTranslateAnchor.fromJson(json) as T,
    const (PaintCircle$CircleTranslateAnchor) => PaintCircle$CircleTranslateAnchor.fromJson(json) as T,
    const (PaintCircle$CirclePitchScale) => PaintCircle$CirclePitchScale.fromJson(json) as T,
    const (PaintCircle$CirclePitchAlignment) => PaintCircle$CirclePitchAlignment.fromJson(json) as T,
    const (PaintSymbol$IconTranslateAnchor) => PaintSymbol$IconTranslateAnchor.fromJson(json) as T,
    const (PaintSymbol$TextTranslateAnchor) => PaintSymbol$TextTranslateAnchor.fromJson(json) as T,
    const (PaintRaster$RasterResampling) => PaintRaster$RasterResampling.fromJson(json) as T,
    const (PaintHillshade$HillshadeIlluminationAnchor) => PaintHillshade$HillshadeIlluminationAnchor.fromJson(json) as T,
    _ => throw Exception('Unknown enum type: $T'),
  };
}
bool isTypeEnumList<T>() {
  return switch(T) {
    const (List<SourceVector$Type>) => true,
    const (List<SourceVector$Scheme>) => true,
    const (List<SourceRaster$Type>) => true,
    const (List<SourceRaster$Scheme>) => true,
    const (List<SourceRasterDem$Type>) => true,
    const (List<SourceRasterDem$Encoding>) => true,
    const (List<SourceGeoJson$Type>) => true,
    const (List<SourceVideo$Type>) => true,
    const (List<SourceImage$Type>) => true,
    const (List<Layer$Type>) => true,
    const (List<Visibility>) => true,
    const (List<LayoutLine$LineCap>) => true,
    const (List<LayoutLine$LineJoin>) => true,
    const (List<LayoutSymbol$SymbolPlacement>) => true,
    const (List<LayoutSymbol$SymbolZOrder>) => true,
    const (List<LayoutSymbol$IconOverlap>) => true,
    const (List<LayoutSymbol$IconRotationAlignment>) => true,
    const (List<LayoutSymbol$IconTextFit>) => true,
    const (List<LayoutSymbol$IconAnchor>) => true,
    const (List<LayoutSymbol$IconPitchAlignment>) => true,
    const (List<LayoutSymbol$TextPitchAlignment>) => true,
    const (List<LayoutSymbol$TextRotationAlignment>) => true,
    const (List<LayoutSymbol$TextJustify>) => true,
    const (List<LayoutSymbol$TextVariableAnchor>) => true,
    const (List<LayoutSymbol$TextAnchor>) => true,
    const (List<LayoutSymbol$TextWritingMode>) => true,
    const (List<LayoutSymbol$TextTransform>) => true,
    const (List<LayoutSymbol$TextOverlap>) => true,
    const (List<Light$Anchor>) => true,
    const (List<Projection$Type>) => true,
    const (List<PaintFill$FillTranslateAnchor>) => true,
    const (List<PaintFillExtrusion$FillExtrusionTranslateAnchor>) => true,
    const (List<PaintLine$LineTranslateAnchor>) => true,
    const (List<PaintCircle$CircleTranslateAnchor>) => true,
    const (List<PaintCircle$CirclePitchScale>) => true,
    const (List<PaintCircle$CirclePitchAlignment>) => true,
    const (List<PaintSymbol$IconTranslateAnchor>) => true,
    const (List<PaintSymbol$TextTranslateAnchor>) => true,
    const (List<PaintRaster$RasterResampling>) => true,
    const (List<PaintHillshade$HillshadeIlluminationAnchor>) => true,
    _ => false,
  };
}
T parseEnumListJson<T>(dynamic json) {
  return switch(T) {
    const (List<SourceVector$Type>) => (json as List).map((e) => SourceVector$Type.fromJson(e)).toList() as T,
    const (List<SourceVector$Scheme>) => (json as List).map((e) => SourceVector$Scheme.fromJson(e)).toList() as T,
    const (List<SourceRaster$Type>) => (json as List).map((e) => SourceRaster$Type.fromJson(e)).toList() as T,
    const (List<SourceRaster$Scheme>) => (json as List).map((e) => SourceRaster$Scheme.fromJson(e)).toList() as T,
    const (List<SourceRasterDem$Type>) => (json as List).map((e) => SourceRasterDem$Type.fromJson(e)).toList() as T,
    const (List<SourceRasterDem$Encoding>) => (json as List).map((e) => SourceRasterDem$Encoding.fromJson(e)).toList() as T,
    const (List<SourceGeoJson$Type>) => (json as List).map((e) => SourceGeoJson$Type.fromJson(e)).toList() as T,
    const (List<SourceVideo$Type>) => (json as List).map((e) => SourceVideo$Type.fromJson(e)).toList() as T,
    const (List<SourceImage$Type>) => (json as List).map((e) => SourceImage$Type.fromJson(e)).toList() as T,
    const (List<Layer$Type>) => (json as List).map((e) => Layer$Type.fromJson(e)).toList() as T,
    const (List<Visibility>) => (json as List).map((e) => Visibility.fromJson(e)).toList() as T,
    const (List<LayoutLine$LineCap>) => (json as List).map((e) => LayoutLine$LineCap.fromJson(e)).toList() as T,
    const (List<LayoutLine$LineJoin>) => (json as List).map((e) => LayoutLine$LineJoin.fromJson(e)).toList() as T,
    const (List<LayoutSymbol$SymbolPlacement>) => (json as List).map((e) => LayoutSymbol$SymbolPlacement.fromJson(e)).toList() as T,
    const (List<LayoutSymbol$SymbolZOrder>) => (json as List).map((e) => LayoutSymbol$SymbolZOrder.fromJson(e)).toList() as T,
    const (List<LayoutSymbol$IconOverlap>) => (json as List).map((e) => LayoutSymbol$IconOverlap.fromJson(e)).toList() as T,
    const (List<LayoutSymbol$IconRotationAlignment>) => (json as List).map((e) => LayoutSymbol$IconRotationAlignment.fromJson(e)).toList() as T,
    const (List<LayoutSymbol$IconTextFit>) => (json as List).map((e) => LayoutSymbol$IconTextFit.fromJson(e)).toList() as T,
    const (List<LayoutSymbol$IconAnchor>) => (json as List).map((e) => LayoutSymbol$IconAnchor.fromJson(e)).toList() as T,
    const (List<LayoutSymbol$IconPitchAlignment>) => (json as List).map((e) => LayoutSymbol$IconPitchAlignment.fromJson(e)).toList() as T,
    const (List<LayoutSymbol$TextPitchAlignment>) => (json as List).map((e) => LayoutSymbol$TextPitchAlignment.fromJson(e)).toList() as T,
    const (List<LayoutSymbol$TextRotationAlignment>) => (json as List).map((e) => LayoutSymbol$TextRotationAlignment.fromJson(e)).toList() as T,
    const (List<LayoutSymbol$TextJustify>) => (json as List).map((e) => LayoutSymbol$TextJustify.fromJson(e)).toList() as T,
    const (List<LayoutSymbol$TextVariableAnchor>) => (json as List).map((e) => LayoutSymbol$TextVariableAnchor.fromJson(e)).toList() as T,
    const (List<LayoutSymbol$TextAnchor>) => (json as List).map((e) => LayoutSymbol$TextAnchor.fromJson(e)).toList() as T,
    const (List<LayoutSymbol$TextWritingMode>) => (json as List).map((e) => LayoutSymbol$TextWritingMode.fromJson(e)).toList() as T,
    const (List<LayoutSymbol$TextTransform>) => (json as List).map((e) => LayoutSymbol$TextTransform.fromJson(e)).toList() as T,
    const (List<LayoutSymbol$TextOverlap>) => (json as List).map((e) => LayoutSymbol$TextOverlap.fromJson(e)).toList() as T,
    const (List<Light$Anchor>) => (json as List).map((e) => Light$Anchor.fromJson(e)).toList() as T,
    const (List<Projection$Type>) => (json as List).map((e) => Projection$Type.fromJson(e)).toList() as T,
    const (List<PaintFill$FillTranslateAnchor>) => (json as List).map((e) => PaintFill$FillTranslateAnchor.fromJson(e)).toList() as T,
    const (List<PaintFillExtrusion$FillExtrusionTranslateAnchor>) => (json as List).map((e) => PaintFillExtrusion$FillExtrusionTranslateAnchor.fromJson(e)).toList() as T,
    const (List<PaintLine$LineTranslateAnchor>) => (json as List).map((e) => PaintLine$LineTranslateAnchor.fromJson(e)).toList() as T,
    const (List<PaintCircle$CircleTranslateAnchor>) => (json as List).map((e) => PaintCircle$CircleTranslateAnchor.fromJson(e)).toList() as T,
    const (List<PaintCircle$CirclePitchScale>) => (json as List).map((e) => PaintCircle$CirclePitchScale.fromJson(e)).toList() as T,
    const (List<PaintCircle$CirclePitchAlignment>) => (json as List).map((e) => PaintCircle$CirclePitchAlignment.fromJson(e)).toList() as T,
    const (List<PaintSymbol$IconTranslateAnchor>) => (json as List).map((e) => PaintSymbol$IconTranslateAnchor.fromJson(e)).toList() as T,
    const (List<PaintSymbol$TextTranslateAnchor>) => (json as List).map((e) => PaintSymbol$TextTranslateAnchor.fromJson(e)).toList() as T,
    const (List<PaintRaster$RasterResampling>) => (json as List).map((e) => PaintRaster$RasterResampling.fromJson(e)).toList() as T,
    const (List<PaintHillshade$HillshadeIlluminationAnchor>) => (json as List).map((e) => PaintHillshade$HillshadeIlluminationAnchor.fromJson(e)).toList() as T,
    _ => throw Exception('Unknown enum type: $T'),
  };
}